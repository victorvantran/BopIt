
project5.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000013fc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ce  00800060  000013fc  00001490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000e  0080012e  0080012e  0000155e  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  0000155e  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000015bc  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000180  00000000  00000000  000015f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001d29  00000000  00000000  00001778  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009e0  00000000  00000000  000034a1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000e67  00000000  00000000  00003e81  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000448  00000000  00000000  00004ce8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000703  00000000  00000000  00005130  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001205  00000000  00000000  00005833  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006a38  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 7a 04 	jmp	0x8f4	; 0x8f4 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 95 04 	jmp	0x92a	; 0x92a <__vector_16>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ec ef       	ldi	r30, 0xFC	; 252
      68:	f3 e1       	ldi	r31, 0x13	; 19
      6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0
      70:	ae 32       	cpi	r26, 0x2E	; 46
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
      76:	21 e0       	ldi	r18, 0x01	; 1
      78:	ae e2       	ldi	r26, 0x2E	; 46
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b2 07       	cpc	r27, r18
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 ca 04 	call	0x994	; 0x994 <main>
      8a:	0c 94 fc 09 	jmp	0x13f8	; 0x13f8 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <time>:
      92:	fc 01       	movw	r30, r24
      94:	0f b6       	in	r0, 0x3f	; 63
      96:	f8 94       	cli
      98:	60 91 38 01 	lds	r22, 0x0138	; 0x800138 <__system_time>
      9c:	70 91 39 01 	lds	r23, 0x0139	; 0x800139 <__system_time+0x1>
      a0:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <__system_time+0x2>
      a4:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <__system_time+0x3>
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	30 97       	sbiw	r30, 0x00	; 0
      ac:	21 f0       	breq	.+8      	; 0xb6 <time+0x24>
      ae:	60 83       	st	Z, r22
      b0:	71 83       	std	Z+1, r23	; 0x01
      b2:	82 83       	std	Z+2, r24	; 0x02
      b4:	93 83       	std	Z+3, r25	; 0x03
      b6:	08 95       	ret

000000b8 <avr_wait>:
	WDTCR = 15;
}

void
avr_wait(unsigned short msec)
{
      b8:	9c 01       	movw	r18, r24
	TCCR0 = 3;
      ba:	83 e0       	ldi	r24, 0x03	; 3
      bc:	83 bf       	out	0x33, r24	; 51
	while (msec--) {
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      be:	83 e8       	ldi	r24, 0x83	; 131

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      c0:	08 c0       	rjmp	.+16     	; 0xd2 <avr_wait+0x1a>
		TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * 0.001);
      c2:	82 bf       	out	0x32, r24	; 50
		//TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * TIMER_RESOLUTION);
		SET_BIT(TIFR, TOV0);
      c4:	98 b7       	in	r25, 0x38	; 56
      c6:	91 60       	ori	r25, 0x01	; 1
      c8:	98 bf       	out	0x38, r25	; 56
		WDR();
      ca:	a8 95       	wdr
		while (!GET_BIT(TIFR, TOV0));
      cc:	08 b6       	in	r0, 0x38	; 56
      ce:	00 fe       	sbrs	r0, 0
      d0:	fd cf       	rjmp	.-6      	; 0xcc <avr_wait+0x14>

void
avr_wait(unsigned short msec)
{
	TCCR0 = 3;
	while (msec--) {
      d2:	21 50       	subi	r18, 0x01	; 1
      d4:	31 09       	sbc	r19, r1
      d6:	a8 f7       	brcc	.-22     	; 0xc2 <avr_wait+0xa>
		//TCNT0 = (unsigned char)(256 - (XTAL_FRQ / 64) * TIMER_RESOLUTION);
		SET_BIT(TIFR, TOV0);
		WDR();
		while (!GET_BIT(TIFR, TOV0));
	}
	TCCR0 = 0;
      d8:	13 be       	out	0x33, r1	; 51
      da:	08 95       	ret

000000dc <output>:
{
	char c;
	while ((c = pgm_read_byte(s++)) != 0) {
		write(c, 1);
	}
}
      dc:	66 23       	and	r22, r22
      de:	11 f0       	breq	.+4      	; 0xe4 <output+0x8>
      e0:	c0 9a       	sbi	0x18, 0	; 24
      e2:	01 c0       	rjmp	.+2      	; 0xe6 <output+0xa>
      e4:	c0 98       	cbi	0x18, 0	; 24
      e6:	c1 98       	cbi	0x18, 1	; 24
      e8:	82 bb       	out	0x12, r24	; 18
      ea:	8f ef       	ldi	r24, 0xFF	; 255
      ec:	81 bb       	out	0x11, r24	; 17
      ee:	c2 9a       	sbi	0x18, 2	; 24
      f0:	00 00       	nop
      f2:	00 00       	nop
      f4:	00 00       	nop
      f6:	c2 98       	cbi	0x18, 2	; 24
      f8:	08 95       	ret

000000fa <write>:
      fa:	c0 98       	cbi	0x18, 0	; 24
      fc:	c1 9a       	sbi	0x18, 1	; 24
      fe:	11 ba       	out	0x11, r1	; 17
     100:	90 b3       	in	r25, 0x10	; 16
     102:	c2 9a       	sbi	0x18, 2	; 24
     104:	00 00       	nop
     106:	00 00       	nop
     108:	00 00       	nop
     10a:	11 ba       	out	0x11, r1	; 17
     10c:	90 b3       	in	r25, 0x10	; 16
     10e:	c2 98       	cbi	0x18, 2	; 24
     110:	99 23       	and	r25, r25
     112:	9c f3       	brlt	.-26     	; 0xfa <write>
     114:	0e 94 6e 00 	call	0xdc	; 0xdc <output>
     118:	08 95       	ret

0000011a <lcd_init>:
     11a:	b8 9a       	sbi	0x17, 0	; 23
     11c:	b9 9a       	sbi	0x17, 1	; 23
     11e:	ba 9a       	sbi	0x17, 2	; 23
     120:	80 e1       	ldi	r24, 0x10	; 16
     122:	90 e0       	ldi	r25, 0x00	; 0
     124:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
     128:	60 e0       	ldi	r22, 0x00	; 0
     12a:	80 e3       	ldi	r24, 0x30	; 48
     12c:	0e 94 6e 00 	call	0xdc	; 0xdc <output>
     130:	85 e0       	ldi	r24, 0x05	; 5
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
     138:	60 e0       	ldi	r22, 0x00	; 0
     13a:	80 e3       	ldi	r24, 0x30	; 48
     13c:	0e 94 6e 00 	call	0xdc	; 0xdc <output>
     140:	81 e0       	ldi	r24, 0x01	; 1
     142:	90 e0       	ldi	r25, 0x00	; 0
     144:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
     148:	60 e0       	ldi	r22, 0x00	; 0
     14a:	8c e3       	ldi	r24, 0x3C	; 60
     14c:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     150:	60 e0       	ldi	r22, 0x00	; 0
     152:	8c e0       	ldi	r24, 0x0C	; 12
     154:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     158:	60 e0       	ldi	r22, 0x00	; 0
     15a:	86 e0       	ldi	r24, 0x06	; 6
     15c:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     160:	60 e0       	ldi	r22, 0x00	; 0
     162:	81 e0       	ldi	r24, 0x01	; 1
     164:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     168:	08 95       	ret

0000016a <lcd_clr>:
     16a:	60 e0       	ldi	r22, 0x00	; 0
     16c:	81 e0       	ldi	r24, 0x01	; 1
     16e:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     172:	08 95       	ret

00000174 <lcd_pos>:
     174:	cf 93       	push	r28
     176:	c6 2f       	mov	r28, r22
     178:	98 e2       	ldi	r25, 0x28	; 40
     17a:	89 9f       	mul	r24, r25
     17c:	c0 0d       	add	r28, r0
     17e:	11 24       	eor	r1, r1
     180:	60 e0       	ldi	r22, 0x00	; 0
     182:	82 e0       	ldi	r24, 0x02	; 2
     184:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     188:	cc 23       	and	r28, r28
     18a:	31 f0       	breq	.+12     	; 0x198 <lcd_pos+0x24>
     18c:	60 e0       	ldi	r22, 0x00	; 0
     18e:	84 e1       	ldi	r24, 0x14	; 20
     190:	0e 94 7d 00 	call	0xfa	; 0xfa <write>
     194:	c1 50       	subi	r28, 0x01	; 1
     196:	d1 f7       	brne	.-12     	; 0x18c <lcd_pos+0x18>
     198:	cf 91       	pop	r28
     19a:	08 95       	ret

0000019c <lcd_puts2>:

void
lcd_puts2(const char *s)
{
     19c:	cf 93       	push	r28
     19e:	df 93       	push	r29
	char c;
	while ((c = *(s++)) != 0) {
     1a0:	ec 01       	movw	r28, r24
     1a2:	21 96       	adiw	r28, 0x01	; 1
     1a4:	fc 01       	movw	r30, r24
     1a6:	80 81       	ld	r24, Z
     1a8:	88 23       	and	r24, r24
     1aa:	31 f0       	breq	.+12     	; 0x1b8 <lcd_puts2+0x1c>
		write(c, 1);
     1ac:	61 e0       	ldi	r22, 0x01	; 1
     1ae:	0e 94 7d 00 	call	0xfa	; 0xfa <write>

void
lcd_puts2(const char *s)
{
	char c;
	while ((c = *(s++)) != 0) {
     1b2:	89 91       	ld	r24, Y+
     1b4:	81 11       	cpse	r24, r1
     1b6:	fa cf       	rjmp	.-12     	; 0x1ac <lcd_puts2+0x10>
		write(c, 1);
	}
     1b8:	df 91       	pop	r29
     1ba:	cf 91       	pop	r28
     1bc:	08 95       	ret

000001be <initiateBopIt>:
	char top_buffer [16];
	sprintf(top_buffer, "p:%d t:%d", reality->pull, reality->twist);
	lcd_puts2(top_buffer);
	
	return;
}
     1be:	fc 01       	movw	r30, r24
     1c0:	10 82       	st	Z, r1
     1c2:	11 82       	std	Z+1, r1	; 0x01
     1c4:	12 82       	std	Z+2, r1	; 0x02
     1c6:	13 82       	std	Z+3, r1	; 0x03
     1c8:	15 82       	std	Z+5, r1	; 0x05
     1ca:	14 82       	std	Z+4, r1	; 0x04
     1cc:	80 e1       	ldi	r24, 0x10	; 16
     1ce:	97 e2       	ldi	r25, 0x27	; 39
     1d0:	97 83       	std	Z+7, r25	; 0x07
     1d2:	86 83       	std	Z+6, r24	; 0x06
     1d4:	11 86       	std	Z+9, r1	; 0x09
     1d6:	10 86       	std	Z+8, r1	; 0x08
     1d8:	8a e0       	ldi	r24, 0x0A	; 10
     1da:	90 e0       	ldi	r25, 0x00	; 0
     1dc:	93 87       	std	Z+11, r25	; 0x0b
     1de:	82 87       	std	Z+10, r24	; 0x0a
     1e0:	15 86       	std	Z+13, r1	; 0x0d
     1e2:	14 86       	std	Z+12, r1	; 0x0c
     1e4:	17 86       	std	Z+15, r1	; 0x0f
     1e6:	16 86       	std	Z+14, r1	; 0x0e
     1e8:	81 e0       	ldi	r24, 0x01	; 1
     1ea:	80 8b       	std	Z+16, r24	; 0x10
     1ec:	08 95       	ret

000001ee <note_wait2>:
     1ee:	9c 01       	movw	r18, r24
     1f0:	82 e0       	ldi	r24, 0x02	; 2
     1f2:	83 bf       	out	0x33, r24	; 51
     1f4:	8b ef       	ldi	r24, 0xFB	; 251
     1f6:	08 c0       	rjmp	.+16     	; 0x208 <note_wait2+0x1a>
     1f8:	82 bf       	out	0x32, r24	; 50
     1fa:	98 b7       	in	r25, 0x38	; 56
     1fc:	91 60       	ori	r25, 0x01	; 1
     1fe:	98 bf       	out	0x38, r25	; 56
     200:	a8 95       	wdr
     202:	08 b6       	in	r0, 0x38	; 56
     204:	00 fe       	sbrs	r0, 0
     206:	fd cf       	rjmp	.-6      	; 0x202 <note_wait2+0x14>
     208:	21 50       	subi	r18, 0x01	; 1
     20a:	31 09       	sbc	r19, r1
     20c:	a8 f7       	brcc	.-22     	; 0x1f8 <note_wait2+0xa>
     20e:	13 be       	out	0x33, r1	; 51
     210:	08 95       	ret

00000212 <play_note>:
     212:	ef 92       	push	r14
     214:	ff 92       	push	r15
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	02 e3       	ldi	r16, 0x32	; 50
     220:	10 e0       	ldi	r17, 0x00	; 0
     222:	d8 2f       	mov	r29, r24
     224:	c9 2f       	mov	r28, r25
     226:	df 9a       	sbi	0x1b, 7	; 27
     228:	fd 2e       	mov	r15, r29
     22a:	ec 2e       	mov	r14, r28
     22c:	8d 2f       	mov	r24, r29
     22e:	9c 2f       	mov	r25, r28
     230:	0e 94 f7 00 	call	0x1ee	; 0x1ee <note_wait2>
     234:	df 98       	cbi	0x1b, 7	; 27
     236:	8d 2f       	mov	r24, r29
     238:	9c 2f       	mov	r25, r28
     23a:	0e 94 f7 00 	call	0x1ee	; 0x1ee <note_wait2>
     23e:	01 50       	subi	r16, 0x01	; 1
     240:	11 09       	sbc	r17, r1
     242:	89 f7       	brne	.-30     	; 0x226 <play_note+0x14>
     244:	8a e0       	ldi	r24, 0x0A	; 10
     246:	90 e0       	ldi	r25, 0x00	; 0
     248:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
     24c:	c2 e3       	ldi	r28, 0x32	; 50
     24e:	d0 e0       	ldi	r29, 0x00	; 0
     250:	df 9a       	sbi	0x1b, 7	; 27
     252:	8f 2d       	mov	r24, r15
     254:	9e 2d       	mov	r25, r14
     256:	0e 94 f7 00 	call	0x1ee	; 0x1ee <note_wait2>
     25a:	df 98       	cbi	0x1b, 7	; 27
     25c:	8f 2d       	mov	r24, r15
     25e:	9e 2d       	mov	r25, r14
     260:	0e 94 f7 00 	call	0x1ee	; 0x1ee <note_wait2>
     264:	21 97       	sbiw	r28, 0x01	; 1
     266:	a1 f7       	brne	.-24     	; 0x250 <play_note+0x3e>
     268:	df 91       	pop	r29
     26a:	cf 91       	pop	r28
     26c:	1f 91       	pop	r17
     26e:	0f 91       	pop	r16
     270:	ff 90       	pop	r15
     272:	ef 90       	pop	r14
     274:	08 95       	ret

00000276 <initiateKeypad>:
     276:	fc 01       	movw	r30, r24
     278:	11 82       	std	Z+1, r1	; 0x01
     27a:	10 82       	st	Z, r1
     27c:	12 82       	std	Z+2, r1	; 0x02
     27e:	13 82       	std	Z+3, r1	; 0x03
     280:	14 82       	std	Z+4, r1	; 0x04
     282:	15 82       	std	Z+5, r1	; 0x05
     284:	16 82       	std	Z+6, r1	; 0x06
     286:	17 82       	std	Z+7, r1	; 0x07
     288:	10 86       	std	Z+8, r1	; 0x08
     28a:	08 95       	ret

0000028c <isPressed>:
     28c:	14 ba       	out	0x14, r1	; 20
     28e:	94 b3       	in	r25, 0x14	; 20
     290:	6c 5f       	subi	r22, 0xFC	; 252
     292:	7f 4f       	sbci	r23, 0xFF	; 255
     294:	21 e0       	ldi	r18, 0x01	; 1
     296:	30 e0       	ldi	r19, 0x00	; 0
     298:	a9 01       	movw	r20, r18
     29a:	02 c0       	rjmp	.+4      	; 0x2a0 <isPressed+0x14>
     29c:	44 0f       	add	r20, r20
     29e:	55 1f       	adc	r21, r21
     2a0:	6a 95       	dec	r22
     2a2:	e2 f7       	brpl	.-8      	; 0x29c <isPressed+0x10>
     2a4:	49 2b       	or	r20, r25
     2a6:	44 bb       	out	0x14, r20	; 20
     2a8:	95 b3       	in	r25, 0x15	; 21
     2aa:	08 2e       	mov	r0, r24
     2ac:	02 c0       	rjmp	.+4      	; 0x2b2 <isPressed+0x26>
     2ae:	22 0f       	add	r18, r18
     2b0:	33 1f       	adc	r19, r19
     2b2:	0a 94       	dec	r0
     2b4:	e2 f7       	brpl	.-8      	; 0x2ae <isPressed+0x22>
     2b6:	29 2b       	or	r18, r25
     2b8:	25 bb       	out	0x15, r18	; 21
     2ba:	23 b3       	in	r18, 0x13	; 19
     2bc:	30 e0       	ldi	r19, 0x00	; 0
     2be:	02 c0       	rjmp	.+4      	; 0x2c4 <isPressed+0x38>
     2c0:	35 95       	asr	r19
     2c2:	27 95       	ror	r18
     2c4:	8a 95       	dec	r24
     2c6:	e2 f7       	brpl	.-8      	; 0x2c0 <isPressed+0x34>
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	90 e0       	ldi	r25, 0x00	; 0
     2cc:	20 ff       	sbrs	r18, 0
     2ce:	02 c0       	rjmp	.+4      	; 0x2d4 <isPressed+0x48>
     2d0:	80 e0       	ldi	r24, 0x00	; 0
     2d2:	90 e0       	ldi	r25, 0x00	; 0
     2d4:	08 95       	ret

000002d6 <getKey>:
     2d6:	0f 93       	push	r16
     2d8:	1f 93       	push	r17
     2da:	cf 93       	push	r28
     2dc:	df 93       	push	r29
     2de:	00 e0       	ldi	r16, 0x00	; 0
     2e0:	10 e0       	ldi	r17, 0x00	; 0
     2e2:	18 c0       	rjmp	.+48     	; 0x314 <getKey+0x3e>
     2e4:	be 01       	movw	r22, r28
     2e6:	c8 01       	movw	r24, r16
     2e8:	0e 94 46 01 	call	0x28c	; 0x28c <isPressed>
     2ec:	00 97       	sbiw	r24, 0x00	; 0
     2ee:	49 f0       	breq	.+18     	; 0x302 <getKey+0x2c>
     2f0:	00 0f       	add	r16, r16
     2f2:	11 1f       	adc	r17, r17
     2f4:	00 0f       	add	r16, r16
     2f6:	11 1f       	adc	r17, r17
     2f8:	c0 0f       	add	r28, r16
     2fa:	d1 1f       	adc	r29, r17
     2fc:	ce 01       	movw	r24, r28
     2fe:	01 96       	adiw	r24, 0x01	; 1
     300:	0c c0       	rjmp	.+24     	; 0x31a <getKey+0x44>
     302:	21 96       	adiw	r28, 0x01	; 1
     304:	c4 30       	cpi	r28, 0x04	; 4
     306:	d1 05       	cpc	r29, r1
     308:	69 f7       	brne	.-38     	; 0x2e4 <getKey+0xe>
     30a:	0f 5f       	subi	r16, 0xFF	; 255
     30c:	1f 4f       	sbci	r17, 0xFF	; 255
     30e:	04 30       	cpi	r16, 0x04	; 4
     310:	11 05       	cpc	r17, r1
     312:	19 f0       	breq	.+6      	; 0x31a <getKey+0x44>
     314:	c0 e0       	ldi	r28, 0x00	; 0
     316:	d0 e0       	ldi	r29, 0x00	; 0
     318:	e5 cf       	rjmp	.-54     	; 0x2e4 <getKey+0xe>
     31a:	df 91       	pop	r29
     31c:	cf 91       	pop	r28
     31e:	1f 91       	pop	r17
     320:	0f 91       	pop	r16
     322:	08 95       	ret

00000324 <initiateState>:
     324:	fc 01       	movw	r30, r24
     326:	11 82       	std	Z+1, r1	; 0x01
     328:	10 82       	st	Z, r1
     32a:	13 82       	std	Z+3, r1	; 0x03
     32c:	12 82       	std	Z+2, r1	; 0x02
     32e:	15 82       	std	Z+5, r1	; 0x05
     330:	14 82       	std	Z+4, r1	; 0x04
     332:	17 82       	std	Z+7, r1	; 0x07
     334:	16 82       	std	Z+6, r1	; 0x06
     336:	08 95       	ret

00000338 <randomizeGoal>:
     338:	cf 93       	push	r28
     33a:	df 93       	push	r29
     33c:	ec 01       	movw	r28, r24
     33e:	0e 94 9f 06 	call	0xd3e	; 0xd3e <rand>
     342:	65 e0       	ldi	r22, 0x05	; 5
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	0e 94 2b 06 	call	0xc56	; 0xc56 <__divmodhi4>
     34a:	00 97       	sbiw	r24, 0x00	; 0
     34c:	19 f4       	brne	.+6      	; 0x354 <randomizeGoal+0x1c>
     34e:	81 e0       	ldi	r24, 0x01	; 1
     350:	88 83       	st	Y, r24
     352:	13 c0       	rjmp	.+38     	; 0x37a <randomizeGoal+0x42>
     354:	81 30       	cpi	r24, 0x01	; 1
     356:	91 05       	cpc	r25, r1
     358:	19 f4       	brne	.+6      	; 0x360 <randomizeGoal+0x28>
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	89 83       	std	Y+1, r24	; 0x01
     35e:	0d c0       	rjmp	.+26     	; 0x37a <randomizeGoal+0x42>
     360:	82 30       	cpi	r24, 0x02	; 2
     362:	91 05       	cpc	r25, r1
     364:	19 f4       	brne	.+6      	; 0x36c <randomizeGoal+0x34>
     366:	81 e0       	ldi	r24, 0x01	; 1
     368:	8a 83       	std	Y+2, r24	; 0x02
     36a:	07 c0       	rjmp	.+14     	; 0x37a <randomizeGoal+0x42>
     36c:	03 97       	sbiw	r24, 0x03	; 3
     36e:	19 f4       	brne	.+6      	; 0x376 <randomizeGoal+0x3e>
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	8b 83       	std	Y+3, r24	; 0x03
     374:	02 c0       	rjmp	.+4      	; 0x37a <randomizeGoal+0x42>
     376:	81 e0       	ldi	r24, 0x01	; 1
     378:	88 83       	st	Y, r24
     37a:	df 91       	pop	r29
     37c:	cf 91       	pop	r28
     37e:	08 95       	ret

00000380 <equalState>:
     380:	fc 01       	movw	r30, r24
     382:	a6 2f       	mov	r26, r22
     384:	b7 2f       	mov	r27, r23
     386:	08 96       	adiw	r24, 0x08	; 8
     388:	61 e0       	ldi	r22, 0x01	; 1
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	41 91       	ld	r20, Z+
     38e:	51 91       	ld	r21, Z+
     390:	2d 91       	ld	r18, X+
     392:	3d 91       	ld	r19, X+
     394:	42 17       	cp	r20, r18
     396:	53 07       	cpc	r21, r19
     398:	21 f0       	breq	.+8      	; 0x3a2 <equalState+0x22>
     39a:	24 17       	cp	r18, r20
     39c:	35 07       	cpc	r19, r21
     39e:	38 f0       	brcs	.+14     	; 0x3ae <equalState+0x2e>
     3a0:	67 2f       	mov	r22, r23
     3a2:	e8 17       	cp	r30, r24
     3a4:	f9 07       	cpc	r31, r25
     3a6:	91 f7       	brne	.-28     	; 0x38c <equalState+0xc>
     3a8:	86 2f       	mov	r24, r22
     3aa:	90 e0       	ldi	r25, 0x00	; 0
     3ac:	08 95       	ret
     3ae:	82 e0       	ldi	r24, 0x02	; 2
     3b0:	90 e0       	ldi	r25, 0x00	; 0
     3b2:	08 95       	ret

000003b4 <readBopIt>:
     3b4:	b3 9b       	sbis	0x16, 3	; 22
     3b6:	03 c0       	rjmp	.+6      	; 0x3be <readBopIt+0xa>
     3b8:	81 e0       	ldi	r24, 0x01	; 1
     3ba:	fb 01       	movw	r30, r22
     3bc:	80 83       	st	Z, r24
     3be:	08 95       	ret

000003c0 <readShakeIt>:
     3c0:	b4 9b       	sbis	0x16, 4	; 22
     3c2:	03 c0       	rjmp	.+6      	; 0x3ca <readShakeIt+0xa>
     3c4:	fb 01       	movw	r30, r22
     3c6:	11 82       	std	Z+1, r1	; 0x01
     3c8:	08 95       	ret
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	fb 01       	movw	r30, r22
     3ce:	81 83       	std	Z+1, r24	; 0x01
     3d0:	08 95       	ret

000003d2 <readPullIt>:
     3d2:	cf 93       	push	r28
     3d4:	df 93       	push	r29
     3d6:	eb 01       	movw	r28, r22
     3d8:	60 91 32 01 	lds	r22, 0x0132	; 0x800132 <analogChannel>
     3dc:	70 91 33 01 	lds	r23, 0x0133	; 0x800133 <analogChannel+0x1>
     3e0:	80 e0       	ldi	r24, 0x00	; 0
     3e2:	90 e0       	ldi	r25, 0x00	; 0
     3e4:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__floatunsisf>
     3e8:	20 e0       	ldi	r18, 0x00	; 0
     3ea:	30 ec       	ldi	r19, 0xC0	; 192
     3ec:	4f e7       	ldi	r20, 0x7F	; 127
     3ee:	53 e4       	ldi	r21, 0x43	; 67
     3f0:	0e 94 02 06 	call	0xc04	; 0xc04 <__gesf2>
     3f4:	18 16       	cp	r1, r24
     3f6:	14 f4       	brge	.+4      	; 0x3fc <readPullIt+0x2a>
     3f8:	81 e0       	ldi	r24, 0x01	; 1
     3fa:	8b 83       	std	Y+3, r24	; 0x03
     3fc:	df 91       	pop	r29
     3fe:	cf 91       	pop	r28
     400:	08 95       	ret

00000402 <getTwist>:
     402:	cf 93       	push	r28
     404:	60 91 34 01 	lds	r22, 0x0134	; 0x800134 <analogChannel+0x2>
     408:	70 91 35 01 	lds	r23, 0x0135	; 0x800135 <analogChannel+0x3>
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	90 e0       	ldi	r25, 0x00	; 0
     410:	0e 94 c5 05 	call	0xb8a	; 0xb8a <__floatunsisf>
     414:	c1 e0       	ldi	r28, 0x01	; 1
     416:	2c ec       	ldi	r18, 0xCC	; 204
     418:	3c e2       	ldi	r19, 0x2C	; 44
     41a:	46 e6       	ldi	r20, 0x66	; 102
     41c:	54 e4       	ldi	r21, 0x44	; 68
     41e:	0e 94 02 06 	call	0xc04	; 0xc04 <__gesf2>
     422:	18 16       	cp	r1, r24
     424:	0c f0       	brlt	.+2      	; 0x428 <getTwist+0x26>
     426:	c0 e0       	ldi	r28, 0x00	; 0
     428:	8c 2f       	mov	r24, r28
     42a:	cf 91       	pop	r28
     42c:	08 95       	ret

0000042e <readReset>:
     42e:	cf 93       	push	r28
     430:	df 93       	push	r29
     432:	ec 01       	movw	r28, r24
     434:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getKey>
     438:	08 97       	sbiw	r24, 0x08	; 8
     43a:	21 f4       	brne	.+8      	; 0x444 <readReset+0x16>
     43c:	1b 86       	std	Y+11, r1	; 0x0b
     43e:	1a 86       	std	Y+10, r1	; 0x0a
     440:	81 e0       	ldi	r24, 0x01	; 1
     442:	01 c0       	rjmp	.+2      	; 0x446 <readReset+0x18>
     444:	80 e0       	ldi	r24, 0x00	; 0
     446:	df 91       	pop	r29
     448:	cf 91       	pop	r28
     44a:	08 95       	ret

0000044c <readTwistIt>:
     44c:	0f 93       	push	r16
     44e:	1f 93       	push	r17
     450:	cf 93       	push	r28
     452:	8b 01       	movw	r16, r22
     454:	c4 2f       	mov	r28, r20
     456:	0e 94 01 02 	call	0x402	; 0x402 <getTwist>
     45a:	8c 17       	cp	r24, r28
     45c:	19 f0       	breq	.+6      	; 0x464 <readTwistIt+0x18>
     45e:	81 e0       	ldi	r24, 0x01	; 1
     460:	f8 01       	movw	r30, r16
     462:	82 83       	std	Z+2, r24	; 0x02
     464:	cf 91       	pop	r28
     466:	1f 91       	pop	r17
     468:	0f 91       	pop	r16
     46a:	08 95       	ret

0000046c <displayCurrentAction>:
     46c:	0f 93       	push	r16
     46e:	1f 93       	push	r17
     470:	cf 93       	push	r28
     472:	df 93       	push	r29
     474:	cd b7       	in	r28, 0x3d	; 61
     476:	de b7       	in	r29, 0x3e	; 62
     478:	60 97       	sbiw	r28, 0x10	; 16
     47a:	0f b6       	in	r0, 0x3f	; 63
     47c:	f8 94       	cli
     47e:	de bf       	out	0x3e, r29	; 62
     480:	0f be       	out	0x3f, r0	; 63
     482:	cd bf       	out	0x3d, r28	; 61
     484:	8c 01       	movw	r16, r24
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	80 e0       	ldi	r24, 0x00	; 0
     48a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
     48e:	f8 01       	movw	r30, r16
     490:	80 81       	ld	r24, Z
     492:	81 30       	cpi	r24, 0x01	; 1
     494:	51 f4       	brne	.+20     	; 0x4aa <displayCurrentAction+0x3e>
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	e4 e6       	ldi	r30, 0x64	; 100
     49a:	f0 e0       	ldi	r31, 0x00	; 0
     49c:	de 01       	movw	r26, r28
     49e:	11 96       	adiw	r26, 0x01	; 1
     4a0:	01 90       	ld	r0, Z+
     4a2:	0d 92       	st	X+, r0
     4a4:	8a 95       	dec	r24
     4a6:	e1 f7       	brne	.-8      	; 0x4a0 <displayCurrentAction+0x34>
     4a8:	41 c0       	rjmp	.+130    	; 0x52c <displayCurrentAction+0xc0>
     4aa:	f8 01       	movw	r30, r16
     4ac:	92 81       	ldd	r25, Z+2	; 0x02
     4ae:	91 30       	cpi	r25, 0x01	; 1
     4b0:	51 f4       	brne	.+20     	; 0x4c6 <displayCurrentAction+0x5a>
     4b2:	80 e1       	ldi	r24, 0x10	; 16
     4b4:	e9 e8       	ldi	r30, 0x89	; 137
     4b6:	f0 e0       	ldi	r31, 0x00	; 0
     4b8:	de 01       	movw	r26, r28
     4ba:	11 96       	adiw	r26, 0x01	; 1
     4bc:	01 90       	ld	r0, Z+
     4be:	0d 92       	st	X+, r0
     4c0:	8a 95       	dec	r24
     4c2:	e1 f7       	brne	.-8      	; 0x4bc <displayCurrentAction+0x50>
     4c4:	33 c0       	rjmp	.+102    	; 0x52c <displayCurrentAction+0xc0>
     4c6:	f8 01       	movw	r30, r16
     4c8:	23 81       	ldd	r18, Z+3	; 0x03
     4ca:	21 30       	cpi	r18, 0x01	; 1
     4cc:	51 f4       	brne	.+20     	; 0x4e2 <displayCurrentAction+0x76>
     4ce:	80 e1       	ldi	r24, 0x10	; 16
     4d0:	e9 e9       	ldi	r30, 0x99	; 153
     4d2:	f0 e0       	ldi	r31, 0x00	; 0
     4d4:	de 01       	movw	r26, r28
     4d6:	11 96       	adiw	r26, 0x01	; 1
     4d8:	01 90       	ld	r0, Z+
     4da:	0d 92       	st	X+, r0
     4dc:	8a 95       	dec	r24
     4de:	e1 f7       	brne	.-8      	; 0x4d8 <displayCurrentAction+0x6c>
     4e0:	25 c0       	rjmp	.+74     	; 0x52c <displayCurrentAction+0xc0>
     4e2:	f8 01       	movw	r30, r16
     4e4:	31 81       	ldd	r19, Z+1	; 0x01
     4e6:	31 30       	cpi	r19, 0x01	; 1
     4e8:	51 f4       	brne	.+20     	; 0x4fe <displayCurrentAction+0x92>
     4ea:	8d e0       	ldi	r24, 0x0D	; 13
     4ec:	e3 e7       	ldi	r30, 0x73	; 115
     4ee:	f0 e0       	ldi	r31, 0x00	; 0
     4f0:	de 01       	movw	r26, r28
     4f2:	11 96       	adiw	r26, 0x01	; 1
     4f4:	01 90       	ld	r0, Z+
     4f6:	0d 92       	st	X+, r0
     4f8:	8a 95       	dec	r24
     4fa:	e1 f7       	brne	.-8      	; 0x4f4 <displayCurrentAction+0x88>
     4fc:	17 c0       	rjmp	.+46     	; 0x52c <displayCurrentAction+0xc0>
     4fe:	1f 92       	push	r1
     500:	1f 92       	push	r1
     502:	1f 92       	push	r1
     504:	2f 93       	push	r18
     506:	1f 92       	push	r1
     508:	9f 93       	push	r25
     50a:	1f 92       	push	r1
     50c:	8f 93       	push	r24
     50e:	80 e8       	ldi	r24, 0x80	; 128
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	9f 93       	push	r25
     514:	8f 93       	push	r24
     516:	ce 01       	movw	r24, r28
     518:	01 96       	adiw	r24, 0x01	; 1
     51a:	9f 93       	push	r25
     51c:	8f 93       	push	r24
     51e:	0e 94 af 06 	call	0xd5e	; 0xd5e <sprintf>
     522:	0f b6       	in	r0, 0x3f	; 63
     524:	f8 94       	cli
     526:	de bf       	out	0x3e, r29	; 62
     528:	0f be       	out	0x3f, r0	; 63
     52a:	cd bf       	out	0x3d, r28	; 61
     52c:	ce 01       	movw	r24, r28
     52e:	01 96       	adiw	r24, 0x01	; 1
     530:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
     534:	60 96       	adiw	r28, 0x10	; 16
     536:	0f b6       	in	r0, 0x3f	; 63
     538:	f8 94       	cli
     53a:	de bf       	out	0x3e, r29	; 62
     53c:	0f be       	out	0x3f, r0	; 63
     53e:	cd bf       	out	0x3d, r28	; 61
     540:	df 91       	pop	r29
     542:	cf 91       	pop	r28
     544:	1f 91       	pop	r17
     546:	0f 91       	pop	r16
     548:	08 95       	ret

0000054a <colorCurrentAction>:
     54a:	fc 01       	movw	r30, r24
     54c:	80 81       	ld	r24, Z
     54e:	81 30       	cpi	r24, 0x01	; 1
     550:	11 f4       	brne	.+4      	; 0x556 <colorCurrentAction+0xc>
     552:	dc 9a       	sbi	0x1b, 4	; 27
     554:	10 c0       	rjmp	.+32     	; 0x576 <colorCurrentAction+0x2c>
     556:	82 81       	ldd	r24, Z+2	; 0x02
     558:	81 30       	cpi	r24, 0x01	; 1
     55a:	11 f4       	brne	.+4      	; 0x560 <colorCurrentAction+0x16>
     55c:	db 9a       	sbi	0x1b, 3	; 27
     55e:	0b c0       	rjmp	.+22     	; 0x576 <colorCurrentAction+0x2c>
     560:	83 81       	ldd	r24, Z+3	; 0x03
     562:	81 30       	cpi	r24, 0x01	; 1
     564:	11 f4       	brne	.+4      	; 0x56a <colorCurrentAction+0x20>
     566:	dd 9a       	sbi	0x1b, 5	; 27
     568:	06 c0       	rjmp	.+12     	; 0x576 <colorCurrentAction+0x2c>
     56a:	81 81       	ldd	r24, Z+1	; 0x01
     56c:	81 30       	cpi	r24, 0x01	; 1
     56e:	19 f4       	brne	.+6      	; 0x576 <colorCurrentAction+0x2c>
     570:	db 9a       	sbi	0x1b, 3	; 27
     572:	dc 9a       	sbi	0x1b, 4	; 27
     574:	dd 9a       	sbi	0x1b, 5	; 27
     576:	84 e6       	ldi	r24, 0x64	; 100
     578:	90 e0       	ldi	r25, 0x00	; 0
     57a:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
     57e:	db 98       	cbi	0x1b, 3	; 27
     580:	dc 98       	cbi	0x1b, 4	; 27
     582:	dd 98       	cbi	0x1b, 5	; 27
     584:	08 95       	ret

00000586 <soundCurrentAction>:
     586:	fc 01       	movw	r30, r24
     588:	80 81       	ld	r24, Z
     58a:	81 30       	cpi	r24, 0x01	; 1
     58c:	29 f4       	brne	.+10     	; 0x598 <soundCurrentAction+0x12>
     58e:	82 e7       	ldi	r24, 0x72	; 114
     590:	90 e0       	ldi	r25, 0x00	; 0
     592:	0e 94 09 01 	call	0x212	; 0x212 <play_note>
     596:	08 95       	ret
     598:	82 81       	ldd	r24, Z+2	; 0x02
     59a:	81 30       	cpi	r24, 0x01	; 1
     59c:	29 f4       	brne	.+10     	; 0x5a8 <soundCurrentAction+0x22>
     59e:	80 e6       	ldi	r24, 0x60	; 96
     5a0:	90 e0       	ldi	r25, 0x00	; 0
     5a2:	0e 94 09 01 	call	0x212	; 0x212 <play_note>
     5a6:	08 95       	ret
     5a8:	83 81       	ldd	r24, Z+3	; 0x03
     5aa:	81 30       	cpi	r24, 0x01	; 1
     5ac:	29 f4       	brne	.+10     	; 0x5b8 <soundCurrentAction+0x32>
     5ae:	80 e4       	ldi	r24, 0x40	; 64
     5b0:	90 e0       	ldi	r25, 0x00	; 0
     5b2:	0e 94 09 01 	call	0x212	; 0x212 <play_note>
     5b6:	08 95       	ret
     5b8:	81 81       	ldd	r24, Z+1	; 0x01
     5ba:	81 30       	cpi	r24, 0x01	; 1
     5bc:	21 f4       	brne	.+8      	; 0x5c6 <soundCurrentAction+0x40>
     5be:	88 e4       	ldi	r24, 0x48	; 72
     5c0:	90 e0       	ldi	r25, 0x00	; 0
     5c2:	0e 94 09 01 	call	0x212	; 0x212 <play_note>
     5c6:	08 95       	ret

000005c8 <displayCurrentScore>:
     5c8:	0f 93       	push	r16
     5ca:	1f 93       	push	r17
     5cc:	cf 93       	push	r28
     5ce:	df 93       	push	r29
     5d0:	cd b7       	in	r28, 0x3d	; 61
     5d2:	de b7       	in	r29, 0x3e	; 62
     5d4:	60 97       	sbiw	r28, 0x10	; 16
     5d6:	0f b6       	in	r0, 0x3f	; 63
     5d8:	f8 94       	cli
     5da:	de bf       	out	0x3e, r29	; 62
     5dc:	0f be       	out	0x3f, r0	; 63
     5de:	cd bf       	out	0x3d, r28	; 61
     5e0:	8c 01       	movw	r16, r24
     5e2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_clr>
     5e6:	60 e0       	ldi	r22, 0x00	; 0
     5e8:	81 e0       	ldi	r24, 0x01	; 1
     5ea:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
     5ee:	f8 01       	movw	r30, r16
     5f0:	83 85       	ldd	r24, Z+11	; 0x0b
     5f2:	8f 93       	push	r24
     5f4:	82 85       	ldd	r24, Z+10	; 0x0a
     5f6:	8f 93       	push	r24
     5f8:	81 85       	ldd	r24, Z+9	; 0x09
     5fa:	8f 93       	push	r24
     5fc:	80 85       	ldd	r24, Z+8	; 0x08
     5fe:	8f 93       	push	r24
     600:	89 ea       	ldi	r24, 0xA9	; 169
     602:	90 e0       	ldi	r25, 0x00	; 0
     604:	9f 93       	push	r25
     606:	8f 93       	push	r24
     608:	8e 01       	movw	r16, r28
     60a:	0f 5f       	subi	r16, 0xFF	; 255
     60c:	1f 4f       	sbci	r17, 0xFF	; 255
     60e:	1f 93       	push	r17
     610:	0f 93       	push	r16
     612:	0e 94 af 06 	call	0xd5e	; 0xd5e <sprintf>
     616:	c8 01       	movw	r24, r16
     618:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
     61c:	0f b6       	in	r0, 0x3f	; 63
     61e:	f8 94       	cli
     620:	de bf       	out	0x3e, r29	; 62
     622:	0f be       	out	0x3f, r0	; 63
     624:	cd bf       	out	0x3d, r28	; 61
     626:	60 96       	adiw	r28, 0x10	; 16
     628:	0f b6       	in	r0, 0x3f	; 63
     62a:	f8 94       	cli
     62c:	de bf       	out	0x3e, r29	; 62
     62e:	0f be       	out	0x3f, r0	; 63
     630:	cd bf       	out	0x3d, r28	; 61
     632:	df 91       	pop	r29
     634:	cf 91       	pop	r28
     636:	1f 91       	pop	r17
     638:	0f 91       	pop	r16
     63a:	08 95       	ret

0000063c <round>:


unsigned char round(struct BopIt *bopIt, struct State *reality, struct State *goal, int timeLimit) { // may no be able to be a function because concurrentsynch issues
     63c:	7f 92       	push	r7
     63e:	8f 92       	push	r8
     640:	9f 92       	push	r9
     642:	af 92       	push	r10
     644:	bf 92       	push	r11
     646:	cf 92       	push	r12
     648:	df 92       	push	r13
     64a:	ef 92       	push	r14
     64c:	ff 92       	push	r15
     64e:	0f 93       	push	r16
     650:	1f 93       	push	r17
     652:	cf 93       	push	r28
     654:	df 93       	push	r29
     656:	cd b7       	in	r28, 0x3d	; 61
     658:	de b7       	in	r29, 0x3e	; 62
     65a:	60 97       	sbiw	r28, 0x10	; 16
     65c:	0f b6       	in	r0, 0x3f	; 63
     65e:	f8 94       	cli
     660:	de bf       	out	0x3e, r29	; 62
     662:	0f be       	out	0x3f, r0	; 63
     664:	cd bf       	out	0x3d, r28	; 61
     666:	8c 01       	movw	r16, r24
     668:	7b 01       	movw	r14, r22
     66a:	5a 01       	movw	r10, r20
     66c:	49 01       	movw	r8, r18
	initiateState(goal);
     66e:	ca 01       	movw	r24, r20
     670:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
	initiateState(reality);
     674:	c7 01       	movw	r24, r14
     676:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
	randomizeGoal(goal);
     67a:	c5 01       	movw	r24, r10
     67c:	0e 94 9c 01 	call	0x338	; 0x338 <randomizeGoal>
	//goal->shake = 1;
	
	displayCurrentAction(goal);
     680:	c5 01       	movw	r24, r10
     682:	0e 94 36 02 	call	0x46c	; 0x46c <displayCurrentAction>
	colorCurrentAction(goal);
     686:	c5 01       	movw	r24, r10
     688:	0e 94 a5 02 	call	0x54a	; 0x54a <colorCurrentAction>
	soundCurrentAction(goal);
     68c:	c5 01       	movw	r24, r10
     68e:	0e 94 c3 02 	call	0x586	; 0x586 <soundCurrentAction>
	unsigned char initialTwist = getTwist();
     692:	0e 94 01 02 	call	0x402	; 0x402 <getTwist>
     696:	78 2e       	mov	r7, r24
	for (int i = 0; i < timeLimit; i = i + SAMPLE_TIME) {
     698:	18 14       	cp	r1, r8
     69a:	19 04       	cpc	r1, r9
     69c:	0c f0       	brlt	.+2      	; 0x6a0 <round+0x64>
     69e:	82 c0       	rjmp	.+260    	; 0x7a4 <round+0x168>
     6a0:	c1 2c       	mov	r12, r1
     6a2:	d1 2c       	mov	r13, r1
		//displayReality(reality);
		avr_wait(SAMPLE_TIME);
     6a4:	82 e3       	ldi	r24, 0x32	; 50
     6a6:	90 e0       	ldi	r25, 0x00	; 0
     6a8:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
		readTwistIt(bopIt, reality, initialTwist);
     6ac:	47 2d       	mov	r20, r7
     6ae:	b7 01       	movw	r22, r14
     6b0:	c8 01       	movw	r24, r16
     6b2:	0e 94 26 02 	call	0x44c	; 0x44c <readTwistIt>
		readPullIt(bopIt, reality);
     6b6:	b7 01       	movw	r22, r14
     6b8:	c8 01       	movw	r24, r16
     6ba:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <readPullIt>
		/*if (goal->tap == 1) {
			readTapIt(bopIt, reality); // [!!] need to change to analog tap
		}*/
		readBopIt(bopIt, reality);
     6be:	b7 01       	movw	r22, r14
     6c0:	c8 01       	movw	r24, r16
     6c2:	0e 94 da 01 	call	0x3b4	; 0x3b4 <readBopIt>
		readShakeIt(bopIt, reality);
     6c6:	b7 01       	movw	r22, r14
     6c8:	c8 01       	movw	r24, r16
     6ca:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <readShakeIt>
		if (readReset(bopIt) == 1) {
     6ce:	c8 01       	movw	r24, r16
     6d0:	0e 94 17 02 	call	0x42e	; 0x42e <readReset>
     6d4:	81 30       	cpi	r24, 0x01	; 1
     6d6:	09 f4       	brne	.+2      	; 0x6da <round+0x9e>
     6d8:	89 c0       	rjmp	.+274    	; 0x7ec <round+0x1b0>
			return 0;
		}
		unsigned short end = equalState(reality, goal);
     6da:	b5 01       	movw	r22, r10
     6dc:	c7 01       	movw	r24, r14
     6de:	0e 94 c0 01 	call	0x380	; 0x380 <equalState>
		if (end == 1) { // three modes (0, 1, 2) (2 is automatic fail)
     6e2:	81 30       	cpi	r24, 0x01	; 1
     6e4:	91 05       	cpc	r25, r1
     6e6:	61 f5       	brne	.+88     	; 0x740 <round+0x104>
			bopIt->score = bopIt->score + 1;
     6e8:	f8 01       	movw	r30, r16
     6ea:	80 85       	ldd	r24, Z+8	; 0x08
     6ec:	91 85       	ldd	r25, Z+9	; 0x09
     6ee:	01 96       	adiw	r24, 0x01	; 1
     6f0:	91 87       	std	Z+9, r25	; 0x09
     6f2:	80 87       	std	Z+8, r24	; 0x08
			bopIt->level = bopIt->level + 1;
     6f4:	84 85       	ldd	r24, Z+12	; 0x0c
     6f6:	95 85       	ldd	r25, Z+13	; 0x0d
     6f8:	01 96       	adiw	r24, 0x01	; 1
     6fa:	95 87       	std	Z+13, r25	; 0x0d
     6fc:	84 87       	std	Z+12, r24	; 0x0c
		
			/*lcd_pos(0,0);
			char top_buffer [16];
			sprintf(top_buffer, "      ++++     ");
			lcd_puts2(top_buffer);*/
			displayCurrentScore(bopIt);
     6fe:	c8 01       	movw	r24, r16
     700:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <displayCurrentScore>
			lcd_pos(0,0);
     704:	60 e0       	ldi	r22, 0x00	; 0
     706:	80 e0       	ldi	r24, 0x00	; 0
     708:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
			char top_buffer [16];
			sprintf(top_buffer, "      ++++     ");
     70c:	80 e1       	ldi	r24, 0x10	; 16
     70e:	e1 ec       	ldi	r30, 0xC1	; 193
     710:	f0 e0       	ldi	r31, 0x00	; 0
     712:	de 01       	movw	r26, r28
     714:	11 96       	adiw	r26, 0x01	; 1
     716:	01 90       	ld	r0, Z+
     718:	0d 92       	st	X+, r0
     71a:	8a 95       	dec	r24
     71c:	e1 f7       	brne	.-8      	; 0x716 <round+0xda>
			lcd_puts2(top_buffer);
     71e:	ce 01       	movw	r24, r28
     720:	01 96       	adiw	r24, 0x01	; 1
     722:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
			//displayReality(reality);
			
			avr_wait(reamainingWait); // can wait scalar of remainder then (based on difficulty)
     726:	c4 01       	movw	r24, r8
     728:	8c 19       	sub	r24, r12
     72a:	9d 09       	sbc	r25, r13
     72c:	89 3e       	cpi	r24, 0xE9	; 233
     72e:	f3 e0       	ldi	r31, 0x03	; 3
     730:	9f 07       	cpc	r25, r31
     732:	14 f0       	brlt	.+4      	; 0x738 <round+0xfc>
     734:	88 ee       	ldi	r24, 0xE8	; 232
     736:	93 e0       	ldi	r25, 0x03	; 3
     738:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
			return 1;
     73c:	81 e0       	ldi	r24, 0x01	; 1
     73e:	5b c0       	rjmp	.+182    	; 0x7f6 <round+0x1ba>
		} else if (end == 2) { // automatic fail, detect extraneous
     740:	82 30       	cpi	r24, 0x02	; 2
     742:	91 05       	cpc	r25, r1
     744:	39 f5       	brne	.+78     	; 0x794 <round+0x158>
			bopIt->lives = bopIt->lives - 1;
     746:	f8 01       	movw	r30, r16
     748:	82 85       	ldd	r24, Z+10	; 0x0a
     74a:	93 85       	ldd	r25, Z+11	; 0x0b
     74c:	01 97       	sbiw	r24, 0x01	; 1
     74e:	93 87       	std	Z+11, r25	; 0x0b
     750:	82 87       	std	Z+10, r24	; 0x0a
			
			//displayReality(reality);
			displayCurrentScore(bopIt);
     752:	c8 01       	movw	r24, r16
     754:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <displayCurrentScore>
			lcd_pos(0,0);
     758:	60 e0       	ldi	r22, 0x00	; 0
     75a:	80 e0       	ldi	r24, 0x00	; 0
     75c:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
			char top_buffer [16];
			sprintf(top_buffer, "      ----     ");
     760:	80 e1       	ldi	r24, 0x10	; 16
     762:	e1 ed       	ldi	r30, 0xD1	; 209
     764:	f0 e0       	ldi	r31, 0x00	; 0
     766:	de 01       	movw	r26, r28
     768:	11 96       	adiw	r26, 0x01	; 1
     76a:	01 90       	ld	r0, Z+
     76c:	0d 92       	st	X+, r0
     76e:	8a 95       	dec	r24
     770:	e1 f7       	brne	.-8      	; 0x76a <round+0x12e>
			lcd_puts2(top_buffer);
     772:	ce 01       	movw	r24, r28
     774:	01 96       	adiw	r24, 0x01	; 1
     776:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>

			unsigned int reamainingWait = (timeLimit - i) > 1000 ? 1000 : (timeLimit - i);
			avr_wait(reamainingWait); // can wait scalar of remainder then (based on difficulty)
     77a:	c4 01       	movw	r24, r8
     77c:	8c 19       	sub	r24, r12
     77e:	9d 09       	sbc	r25, r13
     780:	89 3e       	cpi	r24, 0xE9	; 233
     782:	f3 e0       	ldi	r31, 0x03	; 3
     784:	9f 07       	cpc	r25, r31
     786:	14 f0       	brlt	.+4      	; 0x78c <round+0x150>
     788:	88 ee       	ldi	r24, 0xE8	; 232
     78a:	93 e0       	ldi	r25, 0x03	; 3
     78c:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
			return 0;
     790:	80 e0       	ldi	r24, 0x00	; 0
     792:	31 c0       	rjmp	.+98     	; 0x7f6 <round+0x1ba>
	
	displayCurrentAction(goal);
	colorCurrentAction(goal);
	soundCurrentAction(goal);
	unsigned char initialTwist = getTwist();
	for (int i = 0; i < timeLimit; i = i + SAMPLE_TIME) {
     794:	22 e3       	ldi	r18, 0x32	; 50
     796:	c2 0e       	add	r12, r18
     798:	d1 1c       	adc	r13, r1
     79a:	c8 14       	cp	r12, r8
     79c:	d9 04       	cpc	r13, r9
     79e:	0c f4       	brge	.+2      	; 0x7a2 <round+0x166>
     7a0:	81 cf       	rjmp	.-254    	; 0x6a4 <round+0x68>
     7a2:	26 c0       	rjmp	.+76     	; 0x7f0 <round+0x1b4>
			avr_wait(reamainingWait); // can wait scalar of remainder then (based on difficulty)
			return 0;
		}
	}
	
	if (equalState(reality, goal) == 0 || equalState(reality, goal) == 2) {
     7a4:	b5 01       	movw	r22, r10
     7a6:	c7 01       	movw	r24, r14
     7a8:	0e 94 c0 01 	call	0x380	; 0x380 <equalState>
     7ac:	8d 7f       	andi	r24, 0xFD	; 253
     7ae:	89 2b       	or	r24, r25
     7b0:	e1 f4       	brne	.+56     	; 0x7ea <round+0x1ae>
		bopIt->lives = bopIt->lives - 1;
     7b2:	f8 01       	movw	r30, r16
     7b4:	82 85       	ldd	r24, Z+10	; 0x0a
     7b6:	93 85       	ldd	r25, Z+11	; 0x0b
     7b8:	01 97       	sbiw	r24, 0x01	; 1
     7ba:	93 87       	std	Z+11, r25	; 0x0b
     7bc:	82 87       	std	Z+10, r24	; 0x0a
		lcd_pos(0,0);
     7be:	60 e0       	ldi	r22, 0x00	; 0
     7c0:	80 e0       	ldi	r24, 0x00	; 0
     7c2:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
		char top_buffer [16];
		sprintf(top_buffer, "      ----     ");
     7c6:	80 e1       	ldi	r24, 0x10	; 16
     7c8:	e1 ed       	ldi	r30, 0xD1	; 209
     7ca:	f0 e0       	ldi	r31, 0x00	; 0
     7cc:	de 01       	movw	r26, r28
     7ce:	11 96       	adiw	r26, 0x01	; 1
     7d0:	01 90       	ld	r0, Z+
     7d2:	0d 92       	st	X+, r0
     7d4:	8a 95       	dec	r24
     7d6:	e1 f7       	brne	.-8      	; 0x7d0 <round+0x194>
		lcd_puts2(top_buffer);
     7d8:	ce 01       	movw	r24, r28
     7da:	01 96       	adiw	r24, 0x01	; 1
     7dc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
		displayCurrentScore(bopIt);
     7e0:	c8 01       	movw	r24, r16
     7e2:	0e 94 e4 02 	call	0x5c8	; 0x5c8 <displayCurrentScore>
		return 0;
     7e6:	80 e0       	ldi	r24, 0x00	; 0
     7e8:	06 c0       	rjmp	.+12     	; 0x7f6 <round+0x1ba>
	}
	
}
     7ea:	05 c0       	rjmp	.+10     	; 0x7f6 <round+0x1ba>
			readTapIt(bopIt, reality); // [!!] need to change to analog tap
		}*/
		readBopIt(bopIt, reality);
		readShakeIt(bopIt, reality);
		if (readReset(bopIt) == 1) {
			return 0;
     7ec:	80 e0       	ldi	r24, 0x00	; 0
     7ee:	03 c0       	rjmp	.+6      	; 0x7f6 <round+0x1ba>
			avr_wait(reamainingWait); // can wait scalar of remainder then (based on difficulty)
			return 0;
		}
	}
	
	if (equalState(reality, goal) == 0 || equalState(reality, goal) == 2) {
     7f0:	89 2b       	or	r24, r25
     7f2:	d9 f7       	brne	.-10     	; 0x7ea <round+0x1ae>
     7f4:	de cf       	rjmp	.-68     	; 0x7b2 <round+0x176>
		lcd_puts2(top_buffer);
		displayCurrentScore(bopIt);
		return 0;
	}
	
}
     7f6:	60 96       	adiw	r28, 0x10	; 16
     7f8:	0f b6       	in	r0, 0x3f	; 63
     7fa:	f8 94       	cli
     7fc:	de bf       	out	0x3e, r29	; 62
     7fe:	0f be       	out	0x3f, r0	; 63
     800:	cd bf       	out	0x3d, r28	; 61
     802:	df 91       	pop	r29
     804:	cf 91       	pop	r28
     806:	1f 91       	pop	r17
     808:	0f 91       	pop	r16
     80a:	ff 90       	pop	r15
     80c:	ef 90       	pop	r14
     80e:	df 90       	pop	r13
     810:	cf 90       	pop	r12
     812:	bf 90       	pop	r11
     814:	af 90       	pop	r10
     816:	9f 90       	pop	r9
     818:	8f 90       	pop	r8
     81a:	7f 90       	pop	r7
     81c:	08 95       	ret

0000081e <gameOver>:

void gameOver(struct BopIt *bopIt, struct State *reality, struct State *goal) {
     81e:	ef 92       	push	r14
     820:	ff 92       	push	r15
     822:	0f 93       	push	r16
     824:	1f 93       	push	r17
     826:	cf 93       	push	r28
     828:	df 93       	push	r29
     82a:	cd b7       	in	r28, 0x3d	; 61
     82c:	de b7       	in	r29, 0x3e	; 62
     82e:	a0 97       	sbiw	r28, 0x20	; 32
     830:	0f b6       	in	r0, 0x3f	; 63
     832:	f8 94       	cli
     834:	de bf       	out	0x3e, r29	; 62
     836:	0f be       	out	0x3f, r0	; 63
     838:	cd bf       	out	0x3d, r28	; 61
     83a:	8c 01       	movw	r16, r24
     83c:	7b 01       	movw	r14, r22
     83e:	ca 01       	movw	r24, r20
	initiateState(goal);
     840:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
	initiateState(reality);
     844:	c7 01       	movw	r24, r14
     846:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
	unsigned int finalScore = bopIt->score;
     84a:	f8 01       	movw	r30, r16
     84c:	e0 84       	ldd	r14, Z+8	; 0x08
     84e:	f1 84       	ldd	r15, Z+9	; 0x09
	if (finalScore > bopIt->highScore) {
     850:	86 85       	ldd	r24, Z+14	; 0x0e
     852:	97 85       	ldd	r25, Z+15	; 0x0f
     854:	8e 15       	cp	r24, r14
     856:	9f 05       	cpc	r25, r15
     858:	10 f4       	brcc	.+4      	; 0x85e <gameOver+0x40>
		bopIt->highScore = finalScore;
     85a:	f7 86       	std	Z+15, r15	; 0x0f
     85c:	e6 86       	std	Z+14, r14	; 0x0e
	}
	bopIt->score = 0;
     85e:	f8 01       	movw	r30, r16
     860:	11 86       	std	Z+9, r1	; 0x09
     862:	10 86       	std	Z+8, r1	; 0x08
	bopIt->lives = MAX_LIVES;
     864:	8a e0       	ldi	r24, 0x0A	; 10
     866:	90 e0       	ldi	r25, 0x00	; 0
     868:	93 87       	std	Z+11, r25	; 0x0b
     86a:	82 87       	std	Z+10, r24	; 0x0a
	bopIt->level = 0;
     86c:	15 86       	std	Z+13, r1	; 0x0d
     86e:	14 86       	std	Z+12, r1	; 0x0c
	
	lcd_clr();
     870:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_clr>
	lcd_pos(0,0);
     874:	60 e0       	ldi	r22, 0x00	; 0
     876:	80 e0       	ldi	r24, 0x00	; 0
     878:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
	char top_buffer [16];
	sprintf(top_buffer, "    GAMEOVER    ");
     87c:	81 e1       	ldi	r24, 0x11	; 17
     87e:	e1 ee       	ldi	r30, 0xE1	; 225
     880:	f0 e0       	ldi	r31, 0x00	; 0
     882:	de 01       	movw	r26, r28
     884:	11 96       	adiw	r26, 0x01	; 1
     886:	01 90       	ld	r0, Z+
     888:	0d 92       	st	X+, r0
     88a:	8a 95       	dec	r24
     88c:	e1 f7       	brne	.-8      	; 0x886 <__stack+0x27>
	lcd_puts2(top_buffer);
     88e:	ce 01       	movw	r24, r28
     890:	01 96       	adiw	r24, 0x01	; 1
     892:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>

	lcd_pos(1,0);
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
	char bottom_buffer [16];
	sprintf(bottom_buffer, "FinalScore:%d", finalScore);
     89e:	ff 92       	push	r15
     8a0:	ef 92       	push	r14
     8a2:	82 ef       	ldi	r24, 0xF2	; 242
     8a4:	90 e0       	ldi	r25, 0x00	; 0
     8a6:	9f 93       	push	r25
     8a8:	8f 93       	push	r24
     8aa:	7e 01       	movw	r14, r28
     8ac:	f1 e1       	ldi	r31, 0x11	; 17
     8ae:	ef 0e       	add	r14, r31
     8b0:	f1 1c       	adc	r15, r1
     8b2:	ff 92       	push	r15
     8b4:	ef 92       	push	r14
     8b6:	0e 94 af 06 	call	0xd5e	; 0xd5e <sprintf>
	lcd_puts2(bottom_buffer);
     8ba:	c7 01       	movw	r24, r14
     8bc:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
	
	avr_wait(5000);
     8c0:	88 e8       	ldi	r24, 0x88	; 136
     8c2:	93 e1       	ldi	r25, 0x13	; 19
     8c4:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>

	
	bopIt->menuMode = 1;
     8c8:	81 e0       	ldi	r24, 0x01	; 1
     8ca:	f8 01       	movw	r30, r16
     8cc:	80 8b       	std	Z+16, r24	; 0x10
	return;
     8ce:	0f 90       	pop	r0
     8d0:	0f 90       	pop	r0
     8d2:	0f 90       	pop	r0
     8d4:	0f 90       	pop	r0
     8d6:	0f 90       	pop	r0
     8d8:	0f 90       	pop	r0
}
     8da:	a0 96       	adiw	r28, 0x20	; 32
     8dc:	0f b6       	in	r0, 0x3f	; 63
     8de:	f8 94       	cli
     8e0:	de bf       	out	0x3e, r29	; 62
     8e2:	0f be       	out	0x3f, r0	; 63
     8e4:	cd bf       	out	0x3d, r28	; 61
     8e6:	df 91       	pop	r29
     8e8:	cf 91       	pop	r28
     8ea:	1f 91       	pop	r17
     8ec:	0f 91       	pop	r16
     8ee:	ff 90       	pop	r15
     8f0:	ef 90       	pop	r14
     8f2:	08 95       	ret

000008f4 <__vector_9>:





ISR(TIMER1_OVF_vect) {
     8f4:	1f 92       	push	r1
     8f6:	0f 92       	push	r0
     8f8:	0f b6       	in	r0, 0x3f	; 63
     8fa:	0f 92       	push	r0
     8fc:	11 24       	eor	r1, r1
     8fe:	8f 93       	push	r24
     900:	9f 93       	push	r25
	reset = reset + 1;
     902:	80 91 2e 01 	lds	r24, 0x012E	; 0x80012e <__data_end>
     906:	90 91 2f 01 	lds	r25, 0x012F	; 0x80012f <__data_end+0x1>
     90a:	01 96       	adiw	r24, 0x01	; 1
     90c:	90 93 2f 01 	sts	0x012F, r25	; 0x80012f <__data_end+0x1>
     910:	80 93 2e 01 	sts	0x012E, r24	; 0x80012e <__data_end>
	TCNT1 = 49910; //
     914:	86 ef       	ldi	r24, 0xF6	; 246
     916:	92 ec       	ldi	r25, 0xC2	; 194
     918:	9d bd       	out	0x2d, r25	; 45
     91a:	8c bd       	out	0x2c, r24	; 44
}
     91c:	9f 91       	pop	r25
     91e:	8f 91       	pop	r24
     920:	0f 90       	pop	r0
     922:	0f be       	out	0x3f, r0	; 63
     924:	0f 90       	pop	r0
     926:	1f 90       	pop	r1
     928:	18 95       	reti

0000092a <__vector_16>:


ISR(ADC_vect)
{
     92a:	1f 92       	push	r1
     92c:	0f 92       	push	r0
     92e:	0f b6       	in	r0, 0x3f	; 63
     930:	0f 92       	push	r0
     932:	11 24       	eor	r1, r1
     934:	2f 93       	push	r18
     936:	3f 93       	push	r19
     938:	8f 93       	push	r24
     93a:	9f 93       	push	r25
     93c:	ef 93       	push	r30
     93e:	ff 93       	push	r31
	//Count up to n channels
	(analogChannel[i]) = ADC;
     940:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <i>
     944:	90 91 31 01 	lds	r25, 0x0131	; 0x800131 <i+0x1>
     948:	24 b1       	in	r18, 0x04	; 4
     94a:	35 b1       	in	r19, 0x05	; 5
     94c:	fc 01       	movw	r30, r24
     94e:	ee 0f       	add	r30, r30
     950:	ff 1f       	adc	r31, r31
     952:	ee 5c       	subi	r30, 0xCE	; 206
     954:	fe 4f       	sbci	r31, 0xFE	; 254
     956:	31 83       	std	Z+1, r19	; 0x01
     958:	20 83       	st	Z, r18
	
	if (++i >= ADC_CHANNELS)
     95a:	01 96       	adiw	r24, 0x01	; 1
     95c:	83 30       	cpi	r24, 0x03	; 3
     95e:	91 05       	cpc	r25, r1
     960:	2c f4       	brge	.+10     	; 0x96c <__vector_16+0x42>
     962:	90 93 31 01 	sts	0x0131, r25	; 0x800131 <i+0x1>
     966:	80 93 30 01 	sts	0x0130, r24	; 0x800130 <i>
     96a:	04 c0       	rjmp	.+8      	; 0x974 <__vector_16+0x4a>
	{i=0;}
     96c:	10 92 31 01 	sts	0x0131, r1	; 0x800131 <i+0x1>
     970:	10 92 30 01 	sts	0x0130, r1	; 0x800130 <i>

	//ADMUX = (1<<ADLAR) | (1<<REFS0) | i; //Select ADC Channel
	ADMUX = (1<<REFS0) | (1<<REFS0) | i; //Select ADC Channel
     974:	80 91 30 01 	lds	r24, 0x0130	; 0x800130 <i>
     978:	80 64       	ori	r24, 0x40	; 64
     97a:	87 b9       	out	0x07, r24	; 7
	ADCSRA |= (1 << ADSC);    // Start A2D Conversions
     97c:	36 9a       	sbi	0x06, 6	; 6
}
     97e:	ff 91       	pop	r31
     980:	ef 91       	pop	r30
     982:	9f 91       	pop	r25
     984:	8f 91       	pop	r24
     986:	3f 91       	pop	r19
     988:	2f 91       	pop	r18
     98a:	0f 90       	pop	r0
     98c:	0f be       	out	0x3f, r0	; 63
     98e:	0f 90       	pop	r0
     990:	1f 90       	pop	r1
     992:	18 95       	reti

00000994 <main>:


int main(void)
{
     994:	cf 93       	push	r28
     996:	df 93       	push	r29
     998:	cd b7       	in	r28, 0x3d	; 61
     99a:	de b7       	in	r29, 0x3e	; 62
     99c:	ca 54       	subi	r28, 0x4A	; 74
     99e:	d1 09       	sbc	r29, r1
     9a0:	0f b6       	in	r0, 0x3f	; 63
     9a2:	f8 94       	cli
     9a4:	de bf       	out	0x3e, r29	; 62
     9a6:	0f be       	out	0x3f, r0	; 63
     9a8:	cd bf       	out	0x3d, r28	; 61

	srand(time(NULL));
     9aa:	80 e0       	ldi	r24, 0x00	; 0
     9ac:	90 e0       	ldi	r25, 0x00	; 0
     9ae:	0e 94 49 00 	call	0x92	; 0x92 <time>
     9b2:	cb 01       	movw	r24, r22
     9b4:	0e 94 a4 06 	call	0xd48	; 0xd48 <srand>
	//ADMUX = 0b01000000;
	DDRA = 0b10111111;
     9b8:	8f eb       	ldi	r24, 0xBF	; 191
     9ba:	8a bb       	out	0x1a, r24	; 26
	lcd_init();
     9bc:	0e 94 8d 00 	call	0x11a	; 0x11a <lcd_init>
	

	TCCR1B |= (1<<CS12);
     9c0:	8e b5       	in	r24, 0x2e	; 46
     9c2:	84 60       	ori	r24, 0x04	; 4
     9c4:	8e bd       	out	0x2e, r24	; 46
	TCNT1 = 44910; //
     9c6:	8e e6       	ldi	r24, 0x6E	; 110
     9c8:	9f ea       	ldi	r25, 0xAF	; 175
     9ca:	9d bd       	out	0x2d, r25	; 45
     9cc:	8c bd       	out	0x2c, r24	; 44
	TIMSK |= (1<<TOIE1);
     9ce:	89 b7       	in	r24, 0x39	; 57
     9d0:	84 60       	ori	r24, 0x04	; 4
     9d2:	89 bf       	out	0x39, r24	; 57
	
	
	 //ADMUX |= (1 << REFS0);     // Set ADC reference to AVCC
	 //ADMUX |= (1 << ADLAR);     // Left Adjust the result
	 
	 ADMUX = (1<<REFS0) | (1<<REFS0);
     9d4:	80 e4       	ldi	r24, 0x40	; 64
     9d6:	87 b9       	out	0x07, r24	; 7
	 
	 ADCSRA |= (1 << ADEN);     // Enable ADC
     9d8:	37 9a       	sbi	0x06, 7	; 6
	 ADCSRA |= (1 << ADIE);     // Enable ADC Interrupt
     9da:	33 9a       	sbi	0x06, 3	; 6
	 
	 ADCSRA |= 1 << ADPS2;
     9dc:	32 9a       	sbi	0x06, 2	; 6


	sei();
     9de:	78 94       	sei
	 ADCSRA |= (1 << ADSC);     // Start A2D Conversions  */
     9e0:	36 9a       	sbi	0x06, 6	; 6
	struct BopIt bopIt;
	struct State goal;
	struct State reality;
	// struct InputConfiguration bopConfiguration;
	
	initiateKeypad(&keypad);
     9e2:	ce 01       	movw	r24, r28
     9e4:	01 96       	adiw	r24, 0x01	; 1
     9e6:	0e 94 3b 01 	call	0x276	; 0x276 <initiateKeypad>
	initiateBopIt(&bopIt);
     9ea:	ce 01       	movw	r24, r28
     9ec:	0a 96       	adiw	r24, 0x0a	; 10
     9ee:	0e 94 df 00 	call	0x1be	; 0x1be <initiateBopIt>
	initiateState(&goal);
     9f2:	ce 01       	movw	r24, r28
     9f4:	4b 96       	adiw	r24, 0x1b	; 27
     9f6:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
	initiateState(&reality);
     9fa:	ce 01       	movw	r24, r28
     9fc:	83 96       	adiw	r24, 0x23	; 35
     9fe:	0e 94 92 01 	call	0x324	; 0x324 <initiateState>
			sprintf(top_buffer, "     BOP-IT     ");
			lcd_puts2(top_buffer);

			lcd_pos(1,0);
			char bottom_buffer [16];
			sprintf(bottom_buffer, "Start HS:%d", (&bopIt)->highScore);
     a02:	0f 2e       	mov	r0, r31
     a04:	f1 e1       	ldi	r31, 0x11	; 17
     a06:	cf 2e       	mov	r12, r31
     a08:	f1 e0       	ldi	r31, 0x01	; 1
     a0a:	df 2e       	mov	r13, r31
     a0c:	f0 2d       	mov	r31, r0
     a0e:	7e 01       	movw	r14, r28
     a10:	8b e2       	ldi	r24, 0x2B	; 43
     a12:	e8 0e       	add	r14, r24
     a14:	f1 1c       	adc	r15, r1
     a16:	8e 2c       	mov	r8, r14
     a18:	9f 2c       	mov	r9, r15
		sprintf(top_buffer, "     BEGIN!     ");
		lcd_puts2(top_buffer);
					
		lcd_pos(1,0);
		char bottom_buffer [16];
		sprintf(bottom_buffer, "Score:%d L:%d", bopIt.score, bopIt.lives);
     a1a:	0f 2e       	mov	r0, r31
     a1c:	f9 ea       	ldi	r31, 0xA9	; 169
     a1e:	af 2e       	mov	r10, r31
     a20:	f0 e0       	ldi	r31, 0x00	; 0
     a22:	bf 2e       	mov	r11, r31
     a24:	f0 2d       	mov	r31, r0
	initiateState(&reality);
	
	
	while (1) {
					
		lcd_clr();
     a26:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_clr>
		while ((&bopIt)->menuMode == 1) {
     a2a:	8a 8d       	ldd	r24, Y+26	; 0x1a
     a2c:	81 30       	cpi	r24, 0x01	; 1
     a2e:	09 f0       	breq	.+2      	; 0xa32 <main+0x9e>
     a30:	42 c0       	rjmp	.+132    	; 0xab6 <main+0x122>
			//play_note(TWO_A);
			//avr_wait(1000);
			lcd_pos(0,0);
     a32:	60 e0       	ldi	r22, 0x00	; 0
     a34:	80 e0       	ldi	r24, 0x00	; 0
     a36:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
			char top_buffer [16];
			sprintf(top_buffer, "     BOP-IT     ");
     a3a:	81 e1       	ldi	r24, 0x11	; 17
     a3c:	e0 e0       	ldi	r30, 0x00	; 0
     a3e:	f1 e0       	ldi	r31, 0x01	; 1
     a40:	de 01       	movw	r26, r28
     a42:	db 96       	adiw	r26, 0x3b	; 59
     a44:	01 90       	ld	r0, Z+
     a46:	0d 92       	st	X+, r0
     a48:	8a 95       	dec	r24
     a4a:	e1 f7       	brne	.-8      	; 0xa44 <main+0xb0>
			lcd_puts2(top_buffer);
     a4c:	ce 01       	movw	r24, r28
     a4e:	cb 96       	adiw	r24, 0x3b	; 59
     a50:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>

			lcd_pos(1,0);
     a54:	60 e0       	ldi	r22, 0x00	; 0
     a56:	81 e0       	ldi	r24, 0x01	; 1
     a58:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
			char bottom_buffer [16];
			sprintf(bottom_buffer, "Start HS:%d", (&bopIt)->highScore);
     a5c:	89 8d       	ldd	r24, Y+25	; 0x19
     a5e:	8f 93       	push	r24
     a60:	88 8d       	ldd	r24, Y+24	; 0x18
     a62:	8f 93       	push	r24
     a64:	df 92       	push	r13
     a66:	cf 92       	push	r12
     a68:	ff 92       	push	r15
     a6a:	ef 92       	push	r14
     a6c:	0e 94 af 06 	call	0xd5e	; 0xd5e <sprintf>
			lcd_puts2(bottom_buffer);		
     a70:	88 2d       	mov	r24, r8
     a72:	99 2d       	mov	r25, r9
     a74:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
					
			int key = getKey();
     a78:	0e 94 6b 01 	call	0x2d6	; 0x2d6 <getKey>
			if (key == 4) {
     a7c:	0f 90       	pop	r0
     a7e:	0f 90       	pop	r0
     a80:	0f 90       	pop	r0
     a82:	0f 90       	pop	r0
     a84:	0f 90       	pop	r0
     a86:	0f 90       	pop	r0
     a88:	84 30       	cpi	r24, 0x04	; 4
     a8a:	91 05       	cpc	r25, r1
     a8c:	19 f4       	brne	.+6      	; 0xa94 <main+0x100>
				(&keypad)->startPress = 1;
     a8e:	81 e0       	ldi	r24, 0x01	; 1
     a90:	8c 83       	std	Y+4, r24	; 0x04
     a92:	09 c0       	rjmp	.+18     	; 0xaa6 <main+0x112>
			}
			if (key == 0) {
     a94:	89 2b       	or	r24, r25
     a96:	39 f4       	brne	.+14     	; 0xaa6 <main+0x112>
				if ((&keypad)->startPress == 1) {
     a98:	8c 81       	ldd	r24, Y+4	; 0x04
     a9a:	81 30       	cpi	r24, 0x01	; 1
     a9c:	21 f4       	brne	.+8      	; 0xaa6 <main+0x112>
					(&keypad)->startPress = 0;
     a9e:	1c 82       	std	Y+4, r1	; 0x04
					(&bopIt)->menuMode = 0;
     aa0:	1a 8e       	std	Y+26, r1	; 0x1a
					lcd_clr();
     aa2:	0e 94 b5 00 	call	0x16a	; 0x16a <lcd_clr>
				}
			}
			avr_wait(100);
     aa6:	84 e6       	ldi	r24, 0x64	; 100
     aa8:	90 e0       	ldi	r25, 0x00	; 0
     aaa:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
	
	
	while (1) {
					
		lcd_clr();
		while ((&bopIt)->menuMode == 1) {
     aae:	8a 8d       	ldd	r24, Y+26	; 0x1a
     ab0:	81 30       	cpi	r24, 0x01	; 1
     ab2:	09 f4       	brne	.+2      	; 0xab6 <main+0x122>
     ab4:	be cf       	rjmp	.-132    	; 0xa32 <main+0x9e>
			}
			avr_wait(100);
			//CLR_BIT(PORTA, 3);
		}
		
		lcd_pos(0,0);
     ab6:	60 e0       	ldi	r22, 0x00	; 0
     ab8:	80 e0       	ldi	r24, 0x00	; 0
     aba:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
		char top_buffer [16];
		sprintf(top_buffer, "     BEGIN!     ");
     abe:	81 e1       	ldi	r24, 0x11	; 17
     ac0:	ed e1       	ldi	r30, 0x1D	; 29
     ac2:	f1 e0       	ldi	r31, 0x01	; 1
     ac4:	de 01       	movw	r26, r28
     ac6:	db 96       	adiw	r26, 0x3b	; 59
     ac8:	01 90       	ld	r0, Z+
     aca:	0d 92       	st	X+, r0
     acc:	8a 95       	dec	r24
     ace:	e1 f7       	brne	.-8      	; 0xac8 <main+0x134>
		lcd_puts2(top_buffer);
     ad0:	ce 01       	movw	r24, r28
     ad2:	cb 96       	adiw	r24, 0x3b	; 59
     ad4:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
					
		lcd_pos(1,0);
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	81 e0       	ldi	r24, 0x01	; 1
     adc:	0e 94 ba 00 	call	0x174	; 0x174 <lcd_pos>
		char bottom_buffer [16];
		sprintf(bottom_buffer, "Score:%d L:%d", bopIt.score, bopIt.lives);
     ae0:	8d 89       	ldd	r24, Y+21	; 0x15
     ae2:	8f 93       	push	r24
     ae4:	8c 89       	ldd	r24, Y+20	; 0x14
     ae6:	8f 93       	push	r24
     ae8:	8b 89       	ldd	r24, Y+19	; 0x13
     aea:	8f 93       	push	r24
     aec:	8a 89       	ldd	r24, Y+18	; 0x12
     aee:	8f 93       	push	r24
     af0:	bf 92       	push	r11
     af2:	af 92       	push	r10
     af4:	ff 92       	push	r15
     af6:	ef 92       	push	r14
     af8:	0e 94 af 06 	call	0xd5e	; 0xd5e <sprintf>
		lcd_puts2(bottom_buffer);
     afc:	88 2d       	mov	r24, r8
     afe:	99 2d       	mov	r25, r9
     b00:	0e 94 ce 00 	call	0x19c	; 0x19c <lcd_puts2>
		avr_wait(3000);
     b04:	88 eb       	ldi	r24, 0xB8	; 184
     b06:	9b e0       	ldi	r25, 0x0B	; 11
     b08:	0e 94 5c 00 	call	0xb8	; 0xb8 <avr_wait>
		
		
		
		unsigned int period = 5000;		
		while ((&bopIt)->menuMode == 0) {		
     b0c:	0f b6       	in	r0, 0x3f	; 63
     b0e:	f8 94       	cli
     b10:	de bf       	out	0x3e, r29	; 62
     b12:	0f be       	out	0x3f, r0	; 63
     b14:	cd bf       	out	0x3d, r28	; 61
		lcd_puts2(bottom_buffer);
		avr_wait(3000);
		
		
		
		unsigned int period = 5000;		
     b16:	08 e8       	ldi	r16, 0x88	; 136
     b18:	13 e1       	ldi	r17, 0x13	; 19
		while ((&bopIt)->menuMode == 0) {		
     b1a:	33 c0       	rjmp	.+102    	; 0xb82 <main+0x1ee>
				(&bopIt)->lives = 0;
				gameOver(&bopIt, &reality, &goal);
				break;
			}*/
			unsigned char success = 0;
			success = round(&bopIt, &reality, &goal, period);
     b1c:	98 01       	movw	r18, r16
     b1e:	ae 01       	movw	r20, r28
     b20:	45 5e       	subi	r20, 0xE5	; 229
     b22:	5f 4f       	sbci	r21, 0xFF	; 255
     b24:	be 01       	movw	r22, r28
     b26:	6d 5d       	subi	r22, 0xDD	; 221
     b28:	7f 4f       	sbci	r23, 0xFF	; 255
     b2a:	ce 01       	movw	r24, r28
     b2c:	0a 96       	adiw	r24, 0x0a	; 10
     b2e:	0e 94 1e 03 	call	0x63c	; 0x63c <round>
			period = period - 100;
     b32:	04 56       	subi	r16, 0x64	; 100
     b34:	11 09       	sbc	r17, r1
			if (period < 300) {
     b36:	0c 32       	cpi	r16, 0x2C	; 44
     b38:	91 e0       	ldi	r25, 0x01	; 1
     b3a:	19 07       	cpc	r17, r25
     b3c:	10 f4       	brcc	.+4      	; 0xb42 <main+0x1ae>
				period = 300;
     b3e:	0c e2       	ldi	r16, 0x2C	; 44
     b40:	11 e0       	ldi	r17, 0x01	; 1
			}
			if (success == 0 && (&bopIt)->lives <= 0) {
     b42:	81 11       	cpse	r24, r1
     b44:	0f c0       	rjmp	.+30     	; 0xb64 <main+0x1d0>
     b46:	8c 89       	ldd	r24, Y+20	; 0x14
     b48:	9d 89       	ldd	r25, Y+21	; 0x15
     b4a:	89 2b       	or	r24, r25
     b4c:	d1 f4       	brne	.+52     	; 0xb82 <main+0x1ee>
				gameOver(&bopIt, &reality, &goal);
     b4e:	ae 01       	movw	r20, r28
     b50:	45 5e       	subi	r20, 0xE5	; 229
     b52:	5f 4f       	sbci	r21, 0xFF	; 255
     b54:	be 01       	movw	r22, r28
     b56:	6d 5d       	subi	r22, 0xDD	; 221
     b58:	7f 4f       	sbci	r23, 0xFF	; 255
     b5a:	ce 01       	movw	r24, r28
     b5c:	0a 96       	adiw	r24, 0x0a	; 10
     b5e:	0e 94 0f 04 	call	0x81e	; 0x81e <gameOver>
				break;
     b62:	61 cf       	rjmp	.-318    	; 0xa26 <main+0x92>
			}
			if ((&bopIt)->lives <= 0) {
     b64:	8c 89       	ldd	r24, Y+20	; 0x14
     b66:	9d 89       	ldd	r25, Y+21	; 0x15
     b68:	89 2b       	or	r24, r25
     b6a:	59 f4       	brne	.+22     	; 0xb82 <main+0x1ee>
				gameOver(&bopIt, &reality, &goal);
     b6c:	ae 01       	movw	r20, r28
     b6e:	45 5e       	subi	r20, 0xE5	; 229
     b70:	5f 4f       	sbci	r21, 0xFF	; 255
     b72:	be 01       	movw	r22, r28
     b74:	6d 5d       	subi	r22, 0xDD	; 221
     b76:	7f 4f       	sbci	r23, 0xFF	; 255
     b78:	ce 01       	movw	r24, r28
     b7a:	0a 96       	adiw	r24, 0x0a	; 10
     b7c:	0e 94 0f 04 	call	0x81e	; 0x81e <gameOver>
				break;
     b80:	52 cf       	rjmp	.-348    	; 0xa26 <main+0x92>
		avr_wait(3000);
		
		
		
		unsigned int period = 5000;		
		while ((&bopIt)->menuMode == 0) {		
     b82:	8a 8d       	ldd	r24, Y+26	; 0x1a
     b84:	88 23       	and	r24, r24
     b86:	51 f2       	breq	.-108    	; 0xb1c <main+0x188>
     b88:	4e cf       	rjmp	.-356    	; 0xa26 <main+0x92>

00000b8a <__floatunsisf>:
     b8a:	e8 94       	clt
     b8c:	09 c0       	rjmp	.+18     	; 0xba0 <__floatsisf+0x12>

00000b8e <__floatsisf>:
     b8e:	97 fb       	bst	r25, 7
     b90:	3e f4       	brtc	.+14     	; 0xba0 <__floatsisf+0x12>
     b92:	90 95       	com	r25
     b94:	80 95       	com	r24
     b96:	70 95       	com	r23
     b98:	61 95       	neg	r22
     b9a:	7f 4f       	sbci	r23, 0xFF	; 255
     b9c:	8f 4f       	sbci	r24, 0xFF	; 255
     b9e:	9f 4f       	sbci	r25, 0xFF	; 255
     ba0:	99 23       	and	r25, r25
     ba2:	a9 f0       	breq	.+42     	; 0xbce <__floatsisf+0x40>
     ba4:	f9 2f       	mov	r31, r25
     ba6:	96 e9       	ldi	r25, 0x96	; 150
     ba8:	bb 27       	eor	r27, r27
     baa:	93 95       	inc	r25
     bac:	f6 95       	lsr	r31
     bae:	87 95       	ror	r24
     bb0:	77 95       	ror	r23
     bb2:	67 95       	ror	r22
     bb4:	b7 95       	ror	r27
     bb6:	f1 11       	cpse	r31, r1
     bb8:	f8 cf       	rjmp	.-16     	; 0xbaa <__floatsisf+0x1c>
     bba:	fa f4       	brpl	.+62     	; 0xbfa <__floatsisf+0x6c>
     bbc:	bb 0f       	add	r27, r27
     bbe:	11 f4       	brne	.+4      	; 0xbc4 <__floatsisf+0x36>
     bc0:	60 ff       	sbrs	r22, 0
     bc2:	1b c0       	rjmp	.+54     	; 0xbfa <__floatsisf+0x6c>
     bc4:	6f 5f       	subi	r22, 0xFF	; 255
     bc6:	7f 4f       	sbci	r23, 0xFF	; 255
     bc8:	8f 4f       	sbci	r24, 0xFF	; 255
     bca:	9f 4f       	sbci	r25, 0xFF	; 255
     bcc:	16 c0       	rjmp	.+44     	; 0xbfa <__floatsisf+0x6c>
     bce:	88 23       	and	r24, r24
     bd0:	11 f0       	breq	.+4      	; 0xbd6 <__floatsisf+0x48>
     bd2:	96 e9       	ldi	r25, 0x96	; 150
     bd4:	11 c0       	rjmp	.+34     	; 0xbf8 <__floatsisf+0x6a>
     bd6:	77 23       	and	r23, r23
     bd8:	21 f0       	breq	.+8      	; 0xbe2 <__floatsisf+0x54>
     bda:	9e e8       	ldi	r25, 0x8E	; 142
     bdc:	87 2f       	mov	r24, r23
     bde:	76 2f       	mov	r23, r22
     be0:	05 c0       	rjmp	.+10     	; 0xbec <__floatsisf+0x5e>
     be2:	66 23       	and	r22, r22
     be4:	71 f0       	breq	.+28     	; 0xc02 <__floatsisf+0x74>
     be6:	96 e8       	ldi	r25, 0x86	; 134
     be8:	86 2f       	mov	r24, r22
     bea:	70 e0       	ldi	r23, 0x00	; 0
     bec:	60 e0       	ldi	r22, 0x00	; 0
     bee:	2a f0       	brmi	.+10     	; 0xbfa <__floatsisf+0x6c>
     bf0:	9a 95       	dec	r25
     bf2:	66 0f       	add	r22, r22
     bf4:	77 1f       	adc	r23, r23
     bf6:	88 1f       	adc	r24, r24
     bf8:	da f7       	brpl	.-10     	; 0xbf0 <__floatsisf+0x62>
     bfa:	88 0f       	add	r24, r24
     bfc:	96 95       	lsr	r25
     bfe:	87 95       	ror	r24
     c00:	97 f9       	bld	r25, 7
     c02:	08 95       	ret

00000c04 <__gesf2>:
     c04:	0e 94 07 06 	call	0xc0e	; 0xc0e <__fp_cmp>
     c08:	08 f4       	brcc	.+2      	; 0xc0c <__gesf2+0x8>
     c0a:	8f ef       	ldi	r24, 0xFF	; 255
     c0c:	08 95       	ret

00000c0e <__fp_cmp>:
     c0e:	99 0f       	add	r25, r25
     c10:	00 08       	sbc	r0, r0
     c12:	55 0f       	add	r21, r21
     c14:	aa 0b       	sbc	r26, r26
     c16:	e0 e8       	ldi	r30, 0x80	; 128
     c18:	fe ef       	ldi	r31, 0xFE	; 254
     c1a:	16 16       	cp	r1, r22
     c1c:	17 06       	cpc	r1, r23
     c1e:	e8 07       	cpc	r30, r24
     c20:	f9 07       	cpc	r31, r25
     c22:	c0 f0       	brcs	.+48     	; 0xc54 <__fp_cmp+0x46>
     c24:	12 16       	cp	r1, r18
     c26:	13 06       	cpc	r1, r19
     c28:	e4 07       	cpc	r30, r20
     c2a:	f5 07       	cpc	r31, r21
     c2c:	98 f0       	brcs	.+38     	; 0xc54 <__fp_cmp+0x46>
     c2e:	62 1b       	sub	r22, r18
     c30:	73 0b       	sbc	r23, r19
     c32:	84 0b       	sbc	r24, r20
     c34:	95 0b       	sbc	r25, r21
     c36:	39 f4       	brne	.+14     	; 0xc46 <__fp_cmp+0x38>
     c38:	0a 26       	eor	r0, r26
     c3a:	61 f0       	breq	.+24     	; 0xc54 <__fp_cmp+0x46>
     c3c:	23 2b       	or	r18, r19
     c3e:	24 2b       	or	r18, r20
     c40:	25 2b       	or	r18, r21
     c42:	21 f4       	brne	.+8      	; 0xc4c <__fp_cmp+0x3e>
     c44:	08 95       	ret
     c46:	0a 26       	eor	r0, r26
     c48:	09 f4       	brne	.+2      	; 0xc4c <__fp_cmp+0x3e>
     c4a:	a1 40       	sbci	r26, 0x01	; 1
     c4c:	a6 95       	lsr	r26
     c4e:	8f ef       	ldi	r24, 0xFF	; 255
     c50:	81 1d       	adc	r24, r1
     c52:	81 1d       	adc	r24, r1
     c54:	08 95       	ret

00000c56 <__divmodhi4>:
     c56:	97 fb       	bst	r25, 7
     c58:	07 2e       	mov	r0, r23
     c5a:	16 f4       	brtc	.+4      	; 0xc60 <__divmodhi4+0xa>
     c5c:	00 94       	com	r0
     c5e:	07 d0       	rcall	.+14     	; 0xc6e <__divmodhi4_neg1>
     c60:	77 fd       	sbrc	r23, 7
     c62:	09 d0       	rcall	.+18     	; 0xc76 <__divmodhi4_neg2>
     c64:	0e 94 3f 06 	call	0xc7e	; 0xc7e <__udivmodhi4>
     c68:	07 fc       	sbrc	r0, 7
     c6a:	05 d0       	rcall	.+10     	; 0xc76 <__divmodhi4_neg2>
     c6c:	3e f4       	brtc	.+14     	; 0xc7c <__divmodhi4_exit>

00000c6e <__divmodhi4_neg1>:
     c6e:	90 95       	com	r25
     c70:	81 95       	neg	r24
     c72:	9f 4f       	sbci	r25, 0xFF	; 255
     c74:	08 95       	ret

00000c76 <__divmodhi4_neg2>:
     c76:	70 95       	com	r23
     c78:	61 95       	neg	r22
     c7a:	7f 4f       	sbci	r23, 0xFF	; 255

00000c7c <__divmodhi4_exit>:
     c7c:	08 95       	ret

00000c7e <__udivmodhi4>:
     c7e:	aa 1b       	sub	r26, r26
     c80:	bb 1b       	sub	r27, r27
     c82:	51 e1       	ldi	r21, 0x11	; 17
     c84:	07 c0       	rjmp	.+14     	; 0xc94 <__udivmodhi4_ep>

00000c86 <__udivmodhi4_loop>:
     c86:	aa 1f       	adc	r26, r26
     c88:	bb 1f       	adc	r27, r27
     c8a:	a6 17       	cp	r26, r22
     c8c:	b7 07       	cpc	r27, r23
     c8e:	10 f0       	brcs	.+4      	; 0xc94 <__udivmodhi4_ep>
     c90:	a6 1b       	sub	r26, r22
     c92:	b7 0b       	sbc	r27, r23

00000c94 <__udivmodhi4_ep>:
     c94:	88 1f       	adc	r24, r24
     c96:	99 1f       	adc	r25, r25
     c98:	5a 95       	dec	r21
     c9a:	a9 f7       	brne	.-22     	; 0xc86 <__udivmodhi4_loop>
     c9c:	80 95       	com	r24
     c9e:	90 95       	com	r25
     ca0:	bc 01       	movw	r22, r24
     ca2:	cd 01       	movw	r24, r26
     ca4:	08 95       	ret

00000ca6 <do_rand>:
     ca6:	8f 92       	push	r8
     ca8:	9f 92       	push	r9
     caa:	af 92       	push	r10
     cac:	bf 92       	push	r11
     cae:	cf 92       	push	r12
     cb0:	df 92       	push	r13
     cb2:	ef 92       	push	r14
     cb4:	ff 92       	push	r15
     cb6:	cf 93       	push	r28
     cb8:	df 93       	push	r29
     cba:	ec 01       	movw	r28, r24
     cbc:	68 81       	ld	r22, Y
     cbe:	79 81       	ldd	r23, Y+1	; 0x01
     cc0:	8a 81       	ldd	r24, Y+2	; 0x02
     cc2:	9b 81       	ldd	r25, Y+3	; 0x03
     cc4:	61 15       	cp	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	81 05       	cpc	r24, r1
     cca:	91 05       	cpc	r25, r1
     ccc:	21 f4       	brne	.+8      	; 0xcd6 <do_rand+0x30>
     cce:	64 e2       	ldi	r22, 0x24	; 36
     cd0:	79 ed       	ldi	r23, 0xD9	; 217
     cd2:	8b e5       	ldi	r24, 0x5B	; 91
     cd4:	97 e0       	ldi	r25, 0x07	; 7
     cd6:	2d e1       	ldi	r18, 0x1D	; 29
     cd8:	33 ef       	ldi	r19, 0xF3	; 243
     cda:	41 e0       	ldi	r20, 0x01	; 1
     cdc:	50 e0       	ldi	r21, 0x00	; 0
     cde:	0e 94 62 09 	call	0x12c4	; 0x12c4 <__divmodsi4>
     ce2:	49 01       	movw	r8, r18
     ce4:	5a 01       	movw	r10, r20
     ce6:	9b 01       	movw	r18, r22
     ce8:	ac 01       	movw	r20, r24
     cea:	a7 ea       	ldi	r26, 0xA7	; 167
     cec:	b1 e4       	ldi	r27, 0x41	; 65
     cee:	0e 94 81 09 	call	0x1302	; 0x1302 <__muluhisi3>
     cf2:	6b 01       	movw	r12, r22
     cf4:	7c 01       	movw	r14, r24
     cf6:	ac ee       	ldi	r26, 0xEC	; 236
     cf8:	b4 ef       	ldi	r27, 0xF4	; 244
     cfa:	a5 01       	movw	r20, r10
     cfc:	94 01       	movw	r18, r8
     cfe:	0e 94 8f 09 	call	0x131e	; 0x131e <__mulohisi3>
     d02:	dc 01       	movw	r26, r24
     d04:	cb 01       	movw	r24, r22
     d06:	8c 0d       	add	r24, r12
     d08:	9d 1d       	adc	r25, r13
     d0a:	ae 1d       	adc	r26, r14
     d0c:	bf 1d       	adc	r27, r15
     d0e:	b7 ff       	sbrs	r27, 7
     d10:	03 c0       	rjmp	.+6      	; 0xd18 <do_rand+0x72>
     d12:	01 97       	sbiw	r24, 0x01	; 1
     d14:	a1 09       	sbc	r26, r1
     d16:	b0 48       	sbci	r27, 0x80	; 128
     d18:	88 83       	st	Y, r24
     d1a:	99 83       	std	Y+1, r25	; 0x01
     d1c:	aa 83       	std	Y+2, r26	; 0x02
     d1e:	bb 83       	std	Y+3, r27	; 0x03
     d20:	9f 77       	andi	r25, 0x7F	; 127
     d22:	df 91       	pop	r29
     d24:	cf 91       	pop	r28
     d26:	ff 90       	pop	r15
     d28:	ef 90       	pop	r14
     d2a:	df 90       	pop	r13
     d2c:	cf 90       	pop	r12
     d2e:	bf 90       	pop	r11
     d30:	af 90       	pop	r10
     d32:	9f 90       	pop	r9
     d34:	8f 90       	pop	r8
     d36:	08 95       	ret

00000d38 <rand_r>:
     d38:	0e 94 53 06 	call	0xca6	; 0xca6 <do_rand>
     d3c:	08 95       	ret

00000d3e <rand>:
     d3e:	80 e6       	ldi	r24, 0x60	; 96
     d40:	90 e0       	ldi	r25, 0x00	; 0
     d42:	0e 94 53 06 	call	0xca6	; 0xca6 <do_rand>
     d46:	08 95       	ret

00000d48 <srand>:
     d48:	a0 e0       	ldi	r26, 0x00	; 0
     d4a:	b0 e0       	ldi	r27, 0x00	; 0
     d4c:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__data_start>
     d50:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__data_start+0x1>
     d54:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__data_start+0x2>
     d58:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__data_start+0x3>
     d5c:	08 95       	ret

00000d5e <sprintf>:
     d5e:	ae e0       	ldi	r26, 0x0E	; 14
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e5 eb       	ldi	r30, 0xB5	; 181
     d64:	f6 e0       	ldi	r31, 0x06	; 6
     d66:	0c 94 a2 09 	jmp	0x1344	; 0x1344 <__prologue_saves__+0x1c>
     d6a:	0d 89       	ldd	r16, Y+21	; 0x15
     d6c:	1e 89       	ldd	r17, Y+22	; 0x16
     d6e:	86 e0       	ldi	r24, 0x06	; 6
     d70:	8c 83       	std	Y+4, r24	; 0x04
     d72:	1a 83       	std	Y+2, r17	; 0x02
     d74:	09 83       	std	Y+1, r16	; 0x01
     d76:	8f ef       	ldi	r24, 0xFF	; 255
     d78:	9f e7       	ldi	r25, 0x7F	; 127
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	8d 83       	std	Y+5, r24	; 0x05
     d7e:	ae 01       	movw	r20, r28
     d80:	47 5e       	subi	r20, 0xE7	; 231
     d82:	5f 4f       	sbci	r21, 0xFF	; 255
     d84:	6f 89       	ldd	r22, Y+23	; 0x17
     d86:	78 8d       	ldd	r23, Y+24	; 0x18
     d88:	ce 01       	movw	r24, r28
     d8a:	01 96       	adiw	r24, 0x01	; 1
     d8c:	0e 94 d1 06 	call	0xda2	; 0xda2 <vfprintf>
     d90:	ef 81       	ldd	r30, Y+7	; 0x07
     d92:	f8 85       	ldd	r31, Y+8	; 0x08
     d94:	e0 0f       	add	r30, r16
     d96:	f1 1f       	adc	r31, r17
     d98:	10 82       	st	Z, r1
     d9a:	2e 96       	adiw	r28, 0x0e	; 14
     d9c:	e4 e0       	ldi	r30, 0x04	; 4
     d9e:	0c 94 be 09 	jmp	0x137c	; 0x137c <__epilogue_restores__+0x1c>

00000da2 <vfprintf>:
     da2:	ab e0       	ldi	r26, 0x0B	; 11
     da4:	b0 e0       	ldi	r27, 0x00	; 0
     da6:	e7 ed       	ldi	r30, 0xD7	; 215
     da8:	f6 e0       	ldi	r31, 0x06	; 6
     daa:	0c 94 94 09 	jmp	0x1328	; 0x1328 <__prologue_saves__>
     dae:	6c 01       	movw	r12, r24
     db0:	7b 01       	movw	r14, r22
     db2:	8a 01       	movw	r16, r20
     db4:	fc 01       	movw	r30, r24
     db6:	17 82       	std	Z+7, r1	; 0x07
     db8:	16 82       	std	Z+6, r1	; 0x06
     dba:	83 81       	ldd	r24, Z+3	; 0x03
     dbc:	81 ff       	sbrs	r24, 1
     dbe:	cc c1       	rjmp	.+920    	; 0x1158 <vfprintf+0x3b6>
     dc0:	ce 01       	movw	r24, r28
     dc2:	01 96       	adiw	r24, 0x01	; 1
     dc4:	3c 01       	movw	r6, r24
     dc6:	f6 01       	movw	r30, r12
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	f7 01       	movw	r30, r14
     dcc:	93 fd       	sbrc	r25, 3
     dce:	85 91       	lpm	r24, Z+
     dd0:	93 ff       	sbrs	r25, 3
     dd2:	81 91       	ld	r24, Z+
     dd4:	7f 01       	movw	r14, r30
     dd6:	88 23       	and	r24, r24
     dd8:	09 f4       	brne	.+2      	; 0xddc <vfprintf+0x3a>
     dda:	ba c1       	rjmp	.+884    	; 0x1150 <vfprintf+0x3ae>
     ddc:	85 32       	cpi	r24, 0x25	; 37
     dde:	39 f4       	brne	.+14     	; 0xdee <vfprintf+0x4c>
     de0:	93 fd       	sbrc	r25, 3
     de2:	85 91       	lpm	r24, Z+
     de4:	93 ff       	sbrs	r25, 3
     de6:	81 91       	ld	r24, Z+
     de8:	7f 01       	movw	r14, r30
     dea:	85 32       	cpi	r24, 0x25	; 37
     dec:	29 f4       	brne	.+10     	; 0xdf8 <vfprintf+0x56>
     dee:	b6 01       	movw	r22, r12
     df0:	90 e0       	ldi	r25, 0x00	; 0
     df2:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
     df6:	e7 cf       	rjmp	.-50     	; 0xdc6 <vfprintf+0x24>
     df8:	91 2c       	mov	r9, r1
     dfa:	21 2c       	mov	r2, r1
     dfc:	31 2c       	mov	r3, r1
     dfe:	ff e1       	ldi	r31, 0x1F	; 31
     e00:	f3 15       	cp	r31, r3
     e02:	d8 f0       	brcs	.+54     	; 0xe3a <vfprintf+0x98>
     e04:	8b 32       	cpi	r24, 0x2B	; 43
     e06:	79 f0       	breq	.+30     	; 0xe26 <vfprintf+0x84>
     e08:	38 f4       	brcc	.+14     	; 0xe18 <vfprintf+0x76>
     e0a:	80 32       	cpi	r24, 0x20	; 32
     e0c:	79 f0       	breq	.+30     	; 0xe2c <vfprintf+0x8a>
     e0e:	83 32       	cpi	r24, 0x23	; 35
     e10:	a1 f4       	brne	.+40     	; 0xe3a <vfprintf+0x98>
     e12:	23 2d       	mov	r18, r3
     e14:	20 61       	ori	r18, 0x10	; 16
     e16:	1d c0       	rjmp	.+58     	; 0xe52 <vfprintf+0xb0>
     e18:	8d 32       	cpi	r24, 0x2D	; 45
     e1a:	61 f0       	breq	.+24     	; 0xe34 <vfprintf+0x92>
     e1c:	80 33       	cpi	r24, 0x30	; 48
     e1e:	69 f4       	brne	.+26     	; 0xe3a <vfprintf+0x98>
     e20:	23 2d       	mov	r18, r3
     e22:	21 60       	ori	r18, 0x01	; 1
     e24:	16 c0       	rjmp	.+44     	; 0xe52 <vfprintf+0xb0>
     e26:	83 2d       	mov	r24, r3
     e28:	82 60       	ori	r24, 0x02	; 2
     e2a:	38 2e       	mov	r3, r24
     e2c:	e3 2d       	mov	r30, r3
     e2e:	e4 60       	ori	r30, 0x04	; 4
     e30:	3e 2e       	mov	r3, r30
     e32:	2a c0       	rjmp	.+84     	; 0xe88 <vfprintf+0xe6>
     e34:	f3 2d       	mov	r31, r3
     e36:	f8 60       	ori	r31, 0x08	; 8
     e38:	1d c0       	rjmp	.+58     	; 0xe74 <vfprintf+0xd2>
     e3a:	37 fc       	sbrc	r3, 7
     e3c:	2d c0       	rjmp	.+90     	; 0xe98 <vfprintf+0xf6>
     e3e:	20 ed       	ldi	r18, 0xD0	; 208
     e40:	28 0f       	add	r18, r24
     e42:	2a 30       	cpi	r18, 0x0A	; 10
     e44:	40 f0       	brcs	.+16     	; 0xe56 <vfprintf+0xb4>
     e46:	8e 32       	cpi	r24, 0x2E	; 46
     e48:	b9 f4       	brne	.+46     	; 0xe78 <vfprintf+0xd6>
     e4a:	36 fc       	sbrc	r3, 6
     e4c:	81 c1       	rjmp	.+770    	; 0x1150 <vfprintf+0x3ae>
     e4e:	23 2d       	mov	r18, r3
     e50:	20 64       	ori	r18, 0x40	; 64
     e52:	32 2e       	mov	r3, r18
     e54:	19 c0       	rjmp	.+50     	; 0xe88 <vfprintf+0xe6>
     e56:	36 fe       	sbrs	r3, 6
     e58:	06 c0       	rjmp	.+12     	; 0xe66 <vfprintf+0xc4>
     e5a:	8a e0       	ldi	r24, 0x0A	; 10
     e5c:	98 9e       	mul	r9, r24
     e5e:	20 0d       	add	r18, r0
     e60:	11 24       	eor	r1, r1
     e62:	92 2e       	mov	r9, r18
     e64:	11 c0       	rjmp	.+34     	; 0xe88 <vfprintf+0xe6>
     e66:	ea e0       	ldi	r30, 0x0A	; 10
     e68:	2e 9e       	mul	r2, r30
     e6a:	20 0d       	add	r18, r0
     e6c:	11 24       	eor	r1, r1
     e6e:	22 2e       	mov	r2, r18
     e70:	f3 2d       	mov	r31, r3
     e72:	f0 62       	ori	r31, 0x20	; 32
     e74:	3f 2e       	mov	r3, r31
     e76:	08 c0       	rjmp	.+16     	; 0xe88 <vfprintf+0xe6>
     e78:	8c 36       	cpi	r24, 0x6C	; 108
     e7a:	21 f4       	brne	.+8      	; 0xe84 <vfprintf+0xe2>
     e7c:	83 2d       	mov	r24, r3
     e7e:	80 68       	ori	r24, 0x80	; 128
     e80:	38 2e       	mov	r3, r24
     e82:	02 c0       	rjmp	.+4      	; 0xe88 <vfprintf+0xe6>
     e84:	88 36       	cpi	r24, 0x68	; 104
     e86:	41 f4       	brne	.+16     	; 0xe98 <vfprintf+0xf6>
     e88:	f7 01       	movw	r30, r14
     e8a:	93 fd       	sbrc	r25, 3
     e8c:	85 91       	lpm	r24, Z+
     e8e:	93 ff       	sbrs	r25, 3
     e90:	81 91       	ld	r24, Z+
     e92:	7f 01       	movw	r14, r30
     e94:	81 11       	cpse	r24, r1
     e96:	b3 cf       	rjmp	.-154    	; 0xdfe <vfprintf+0x5c>
     e98:	98 2f       	mov	r25, r24
     e9a:	9f 7d       	andi	r25, 0xDF	; 223
     e9c:	95 54       	subi	r25, 0x45	; 69
     e9e:	93 30       	cpi	r25, 0x03	; 3
     ea0:	28 f4       	brcc	.+10     	; 0xeac <vfprintf+0x10a>
     ea2:	0c 5f       	subi	r16, 0xFC	; 252
     ea4:	1f 4f       	sbci	r17, 0xFF	; 255
     ea6:	9f e3       	ldi	r25, 0x3F	; 63
     ea8:	99 83       	std	Y+1, r25	; 0x01
     eaa:	0d c0       	rjmp	.+26     	; 0xec6 <vfprintf+0x124>
     eac:	83 36       	cpi	r24, 0x63	; 99
     eae:	31 f0       	breq	.+12     	; 0xebc <vfprintf+0x11a>
     eb0:	83 37       	cpi	r24, 0x73	; 115
     eb2:	71 f0       	breq	.+28     	; 0xed0 <vfprintf+0x12e>
     eb4:	83 35       	cpi	r24, 0x53	; 83
     eb6:	09 f0       	breq	.+2      	; 0xeba <vfprintf+0x118>
     eb8:	59 c0       	rjmp	.+178    	; 0xf6c <vfprintf+0x1ca>
     eba:	21 c0       	rjmp	.+66     	; 0xefe <vfprintf+0x15c>
     ebc:	f8 01       	movw	r30, r16
     ebe:	80 81       	ld	r24, Z
     ec0:	89 83       	std	Y+1, r24	; 0x01
     ec2:	0e 5f       	subi	r16, 0xFE	; 254
     ec4:	1f 4f       	sbci	r17, 0xFF	; 255
     ec6:	88 24       	eor	r8, r8
     ec8:	83 94       	inc	r8
     eca:	91 2c       	mov	r9, r1
     ecc:	53 01       	movw	r10, r6
     ece:	13 c0       	rjmp	.+38     	; 0xef6 <vfprintf+0x154>
     ed0:	28 01       	movw	r4, r16
     ed2:	f2 e0       	ldi	r31, 0x02	; 2
     ed4:	4f 0e       	add	r4, r31
     ed6:	51 1c       	adc	r5, r1
     ed8:	f8 01       	movw	r30, r16
     eda:	a0 80       	ld	r10, Z
     edc:	b1 80       	ldd	r11, Z+1	; 0x01
     ede:	36 fe       	sbrs	r3, 6
     ee0:	03 c0       	rjmp	.+6      	; 0xee8 <vfprintf+0x146>
     ee2:	69 2d       	mov	r22, r9
     ee4:	70 e0       	ldi	r23, 0x00	; 0
     ee6:	02 c0       	rjmp	.+4      	; 0xeec <vfprintf+0x14a>
     ee8:	6f ef       	ldi	r22, 0xFF	; 255
     eea:	7f ef       	ldi	r23, 0xFF	; 255
     eec:	c5 01       	movw	r24, r10
     eee:	0e 94 bd 08 	call	0x117a	; 0x117a <strnlen>
     ef2:	4c 01       	movw	r8, r24
     ef4:	82 01       	movw	r16, r4
     ef6:	f3 2d       	mov	r31, r3
     ef8:	ff 77       	andi	r31, 0x7F	; 127
     efa:	3f 2e       	mov	r3, r31
     efc:	16 c0       	rjmp	.+44     	; 0xf2a <vfprintf+0x188>
     efe:	28 01       	movw	r4, r16
     f00:	22 e0       	ldi	r18, 0x02	; 2
     f02:	42 0e       	add	r4, r18
     f04:	51 1c       	adc	r5, r1
     f06:	f8 01       	movw	r30, r16
     f08:	a0 80       	ld	r10, Z
     f0a:	b1 80       	ldd	r11, Z+1	; 0x01
     f0c:	36 fe       	sbrs	r3, 6
     f0e:	03 c0       	rjmp	.+6      	; 0xf16 <vfprintf+0x174>
     f10:	69 2d       	mov	r22, r9
     f12:	70 e0       	ldi	r23, 0x00	; 0
     f14:	02 c0       	rjmp	.+4      	; 0xf1a <vfprintf+0x178>
     f16:	6f ef       	ldi	r22, 0xFF	; 255
     f18:	7f ef       	ldi	r23, 0xFF	; 255
     f1a:	c5 01       	movw	r24, r10
     f1c:	0e 94 b2 08 	call	0x1164	; 0x1164 <strnlen_P>
     f20:	4c 01       	movw	r8, r24
     f22:	f3 2d       	mov	r31, r3
     f24:	f0 68       	ori	r31, 0x80	; 128
     f26:	3f 2e       	mov	r3, r31
     f28:	82 01       	movw	r16, r4
     f2a:	33 fc       	sbrc	r3, 3
     f2c:	1b c0       	rjmp	.+54     	; 0xf64 <vfprintf+0x1c2>
     f2e:	82 2d       	mov	r24, r2
     f30:	90 e0       	ldi	r25, 0x00	; 0
     f32:	88 16       	cp	r8, r24
     f34:	99 06       	cpc	r9, r25
     f36:	b0 f4       	brcc	.+44     	; 0xf64 <vfprintf+0x1c2>
     f38:	b6 01       	movw	r22, r12
     f3a:	80 e2       	ldi	r24, 0x20	; 32
     f3c:	90 e0       	ldi	r25, 0x00	; 0
     f3e:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
     f42:	2a 94       	dec	r2
     f44:	f4 cf       	rjmp	.-24     	; 0xf2e <vfprintf+0x18c>
     f46:	f5 01       	movw	r30, r10
     f48:	37 fc       	sbrc	r3, 7
     f4a:	85 91       	lpm	r24, Z+
     f4c:	37 fe       	sbrs	r3, 7
     f4e:	81 91       	ld	r24, Z+
     f50:	5f 01       	movw	r10, r30
     f52:	b6 01       	movw	r22, r12
     f54:	90 e0       	ldi	r25, 0x00	; 0
     f56:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
     f5a:	21 10       	cpse	r2, r1
     f5c:	2a 94       	dec	r2
     f5e:	21 e0       	ldi	r18, 0x01	; 1
     f60:	82 1a       	sub	r8, r18
     f62:	91 08       	sbc	r9, r1
     f64:	81 14       	cp	r8, r1
     f66:	91 04       	cpc	r9, r1
     f68:	71 f7       	brne	.-36     	; 0xf46 <vfprintf+0x1a4>
     f6a:	e8 c0       	rjmp	.+464    	; 0x113c <vfprintf+0x39a>
     f6c:	84 36       	cpi	r24, 0x64	; 100
     f6e:	11 f0       	breq	.+4      	; 0xf74 <vfprintf+0x1d2>
     f70:	89 36       	cpi	r24, 0x69	; 105
     f72:	41 f5       	brne	.+80     	; 0xfc4 <vfprintf+0x222>
     f74:	f8 01       	movw	r30, r16
     f76:	37 fe       	sbrs	r3, 7
     f78:	07 c0       	rjmp	.+14     	; 0xf88 <vfprintf+0x1e6>
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	0c 5f       	subi	r16, 0xFC	; 252
     f84:	1f 4f       	sbci	r17, 0xFF	; 255
     f86:	08 c0       	rjmp	.+16     	; 0xf98 <vfprintf+0x1f6>
     f88:	60 81       	ld	r22, Z
     f8a:	71 81       	ldd	r23, Z+1	; 0x01
     f8c:	07 2e       	mov	r0, r23
     f8e:	00 0c       	add	r0, r0
     f90:	88 0b       	sbc	r24, r24
     f92:	99 0b       	sbc	r25, r25
     f94:	0e 5f       	subi	r16, 0xFE	; 254
     f96:	1f 4f       	sbci	r17, 0xFF	; 255
     f98:	f3 2d       	mov	r31, r3
     f9a:	ff 76       	andi	r31, 0x6F	; 111
     f9c:	3f 2e       	mov	r3, r31
     f9e:	97 ff       	sbrs	r25, 7
     fa0:	09 c0       	rjmp	.+18     	; 0xfb4 <vfprintf+0x212>
     fa2:	90 95       	com	r25
     fa4:	80 95       	com	r24
     fa6:	70 95       	com	r23
     fa8:	61 95       	neg	r22
     faa:	7f 4f       	sbci	r23, 0xFF	; 255
     fac:	8f 4f       	sbci	r24, 0xFF	; 255
     fae:	9f 4f       	sbci	r25, 0xFF	; 255
     fb0:	f0 68       	ori	r31, 0x80	; 128
     fb2:	3f 2e       	mov	r3, r31
     fb4:	2a e0       	ldi	r18, 0x0A	; 10
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	a3 01       	movw	r20, r6
     fba:	0e 94 04 09 	call	0x1208	; 0x1208 <__ultoa_invert>
     fbe:	88 2e       	mov	r8, r24
     fc0:	86 18       	sub	r8, r6
     fc2:	45 c0       	rjmp	.+138    	; 0x104e <vfprintf+0x2ac>
     fc4:	85 37       	cpi	r24, 0x75	; 117
     fc6:	31 f4       	brne	.+12     	; 0xfd4 <vfprintf+0x232>
     fc8:	23 2d       	mov	r18, r3
     fca:	2f 7e       	andi	r18, 0xEF	; 239
     fcc:	b2 2e       	mov	r11, r18
     fce:	2a e0       	ldi	r18, 0x0A	; 10
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	25 c0       	rjmp	.+74     	; 0x101e <vfprintf+0x27c>
     fd4:	93 2d       	mov	r25, r3
     fd6:	99 7f       	andi	r25, 0xF9	; 249
     fd8:	b9 2e       	mov	r11, r25
     fda:	8f 36       	cpi	r24, 0x6F	; 111
     fdc:	c1 f0       	breq	.+48     	; 0x100e <vfprintf+0x26c>
     fde:	18 f4       	brcc	.+6      	; 0xfe6 <vfprintf+0x244>
     fe0:	88 35       	cpi	r24, 0x58	; 88
     fe2:	79 f0       	breq	.+30     	; 0x1002 <vfprintf+0x260>
     fe4:	b5 c0       	rjmp	.+362    	; 0x1150 <vfprintf+0x3ae>
     fe6:	80 37       	cpi	r24, 0x70	; 112
     fe8:	19 f0       	breq	.+6      	; 0xff0 <vfprintf+0x24e>
     fea:	88 37       	cpi	r24, 0x78	; 120
     fec:	21 f0       	breq	.+8      	; 0xff6 <vfprintf+0x254>
     fee:	b0 c0       	rjmp	.+352    	; 0x1150 <vfprintf+0x3ae>
     ff0:	e9 2f       	mov	r30, r25
     ff2:	e0 61       	ori	r30, 0x10	; 16
     ff4:	be 2e       	mov	r11, r30
     ff6:	b4 fe       	sbrs	r11, 4
     ff8:	0d c0       	rjmp	.+26     	; 0x1014 <vfprintf+0x272>
     ffa:	fb 2d       	mov	r31, r11
     ffc:	f4 60       	ori	r31, 0x04	; 4
     ffe:	bf 2e       	mov	r11, r31
    1000:	09 c0       	rjmp	.+18     	; 0x1014 <vfprintf+0x272>
    1002:	34 fe       	sbrs	r3, 4
    1004:	0a c0       	rjmp	.+20     	; 0x101a <vfprintf+0x278>
    1006:	29 2f       	mov	r18, r25
    1008:	26 60       	ori	r18, 0x06	; 6
    100a:	b2 2e       	mov	r11, r18
    100c:	06 c0       	rjmp	.+12     	; 0x101a <vfprintf+0x278>
    100e:	28 e0       	ldi	r18, 0x08	; 8
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	05 c0       	rjmp	.+10     	; 0x101e <vfprintf+0x27c>
    1014:	20 e1       	ldi	r18, 0x10	; 16
    1016:	30 e0       	ldi	r19, 0x00	; 0
    1018:	02 c0       	rjmp	.+4      	; 0x101e <vfprintf+0x27c>
    101a:	20 e1       	ldi	r18, 0x10	; 16
    101c:	32 e0       	ldi	r19, 0x02	; 2
    101e:	f8 01       	movw	r30, r16
    1020:	b7 fe       	sbrs	r11, 7
    1022:	07 c0       	rjmp	.+14     	; 0x1032 <vfprintf+0x290>
    1024:	60 81       	ld	r22, Z
    1026:	71 81       	ldd	r23, Z+1	; 0x01
    1028:	82 81       	ldd	r24, Z+2	; 0x02
    102a:	93 81       	ldd	r25, Z+3	; 0x03
    102c:	0c 5f       	subi	r16, 0xFC	; 252
    102e:	1f 4f       	sbci	r17, 0xFF	; 255
    1030:	06 c0       	rjmp	.+12     	; 0x103e <vfprintf+0x29c>
    1032:	60 81       	ld	r22, Z
    1034:	71 81       	ldd	r23, Z+1	; 0x01
    1036:	80 e0       	ldi	r24, 0x00	; 0
    1038:	90 e0       	ldi	r25, 0x00	; 0
    103a:	0e 5f       	subi	r16, 0xFE	; 254
    103c:	1f 4f       	sbci	r17, 0xFF	; 255
    103e:	a3 01       	movw	r20, r6
    1040:	0e 94 04 09 	call	0x1208	; 0x1208 <__ultoa_invert>
    1044:	88 2e       	mov	r8, r24
    1046:	86 18       	sub	r8, r6
    1048:	fb 2d       	mov	r31, r11
    104a:	ff 77       	andi	r31, 0x7F	; 127
    104c:	3f 2e       	mov	r3, r31
    104e:	36 fe       	sbrs	r3, 6
    1050:	0d c0       	rjmp	.+26     	; 0x106c <vfprintf+0x2ca>
    1052:	23 2d       	mov	r18, r3
    1054:	2e 7f       	andi	r18, 0xFE	; 254
    1056:	a2 2e       	mov	r10, r18
    1058:	89 14       	cp	r8, r9
    105a:	58 f4       	brcc	.+22     	; 0x1072 <vfprintf+0x2d0>
    105c:	34 fe       	sbrs	r3, 4
    105e:	0b c0       	rjmp	.+22     	; 0x1076 <vfprintf+0x2d4>
    1060:	32 fc       	sbrc	r3, 2
    1062:	09 c0       	rjmp	.+18     	; 0x1076 <vfprintf+0x2d4>
    1064:	83 2d       	mov	r24, r3
    1066:	8e 7e       	andi	r24, 0xEE	; 238
    1068:	a8 2e       	mov	r10, r24
    106a:	05 c0       	rjmp	.+10     	; 0x1076 <vfprintf+0x2d4>
    106c:	b8 2c       	mov	r11, r8
    106e:	a3 2c       	mov	r10, r3
    1070:	03 c0       	rjmp	.+6      	; 0x1078 <vfprintf+0x2d6>
    1072:	b8 2c       	mov	r11, r8
    1074:	01 c0       	rjmp	.+2      	; 0x1078 <vfprintf+0x2d6>
    1076:	b9 2c       	mov	r11, r9
    1078:	a4 fe       	sbrs	r10, 4
    107a:	0f c0       	rjmp	.+30     	; 0x109a <vfprintf+0x2f8>
    107c:	fe 01       	movw	r30, r28
    107e:	e8 0d       	add	r30, r8
    1080:	f1 1d       	adc	r31, r1
    1082:	80 81       	ld	r24, Z
    1084:	80 33       	cpi	r24, 0x30	; 48
    1086:	21 f4       	brne	.+8      	; 0x1090 <vfprintf+0x2ee>
    1088:	9a 2d       	mov	r25, r10
    108a:	99 7e       	andi	r25, 0xE9	; 233
    108c:	a9 2e       	mov	r10, r25
    108e:	09 c0       	rjmp	.+18     	; 0x10a2 <vfprintf+0x300>
    1090:	a2 fe       	sbrs	r10, 2
    1092:	06 c0       	rjmp	.+12     	; 0x10a0 <vfprintf+0x2fe>
    1094:	b3 94       	inc	r11
    1096:	b3 94       	inc	r11
    1098:	04 c0       	rjmp	.+8      	; 0x10a2 <vfprintf+0x300>
    109a:	8a 2d       	mov	r24, r10
    109c:	86 78       	andi	r24, 0x86	; 134
    109e:	09 f0       	breq	.+2      	; 0x10a2 <vfprintf+0x300>
    10a0:	b3 94       	inc	r11
    10a2:	a3 fc       	sbrc	r10, 3
    10a4:	11 c0       	rjmp	.+34     	; 0x10c8 <vfprintf+0x326>
    10a6:	a0 fe       	sbrs	r10, 0
    10a8:	06 c0       	rjmp	.+12     	; 0x10b6 <vfprintf+0x314>
    10aa:	b2 14       	cp	r11, r2
    10ac:	88 f4       	brcc	.+34     	; 0x10d0 <vfprintf+0x32e>
    10ae:	28 0c       	add	r2, r8
    10b0:	92 2c       	mov	r9, r2
    10b2:	9b 18       	sub	r9, r11
    10b4:	0e c0       	rjmp	.+28     	; 0x10d2 <vfprintf+0x330>
    10b6:	b2 14       	cp	r11, r2
    10b8:	60 f4       	brcc	.+24     	; 0x10d2 <vfprintf+0x330>
    10ba:	b6 01       	movw	r22, r12
    10bc:	80 e2       	ldi	r24, 0x20	; 32
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    10c4:	b3 94       	inc	r11
    10c6:	f7 cf       	rjmp	.-18     	; 0x10b6 <vfprintf+0x314>
    10c8:	b2 14       	cp	r11, r2
    10ca:	18 f4       	brcc	.+6      	; 0x10d2 <vfprintf+0x330>
    10cc:	2b 18       	sub	r2, r11
    10ce:	02 c0       	rjmp	.+4      	; 0x10d4 <vfprintf+0x332>
    10d0:	98 2c       	mov	r9, r8
    10d2:	21 2c       	mov	r2, r1
    10d4:	a4 fe       	sbrs	r10, 4
    10d6:	10 c0       	rjmp	.+32     	; 0x10f8 <vfprintf+0x356>
    10d8:	b6 01       	movw	r22, r12
    10da:	80 e3       	ldi	r24, 0x30	; 48
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    10e2:	a2 fe       	sbrs	r10, 2
    10e4:	17 c0       	rjmp	.+46     	; 0x1114 <vfprintf+0x372>
    10e6:	a1 fc       	sbrc	r10, 1
    10e8:	03 c0       	rjmp	.+6      	; 0x10f0 <vfprintf+0x34e>
    10ea:	88 e7       	ldi	r24, 0x78	; 120
    10ec:	90 e0       	ldi	r25, 0x00	; 0
    10ee:	02 c0       	rjmp	.+4      	; 0x10f4 <vfprintf+0x352>
    10f0:	88 e5       	ldi	r24, 0x58	; 88
    10f2:	90 e0       	ldi	r25, 0x00	; 0
    10f4:	b6 01       	movw	r22, r12
    10f6:	0c c0       	rjmp	.+24     	; 0x1110 <vfprintf+0x36e>
    10f8:	8a 2d       	mov	r24, r10
    10fa:	86 78       	andi	r24, 0x86	; 134
    10fc:	59 f0       	breq	.+22     	; 0x1114 <vfprintf+0x372>
    10fe:	a1 fe       	sbrs	r10, 1
    1100:	02 c0       	rjmp	.+4      	; 0x1106 <vfprintf+0x364>
    1102:	8b e2       	ldi	r24, 0x2B	; 43
    1104:	01 c0       	rjmp	.+2      	; 0x1108 <vfprintf+0x366>
    1106:	80 e2       	ldi	r24, 0x20	; 32
    1108:	a7 fc       	sbrc	r10, 7
    110a:	8d e2       	ldi	r24, 0x2D	; 45
    110c:	b6 01       	movw	r22, r12
    110e:	90 e0       	ldi	r25, 0x00	; 0
    1110:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    1114:	89 14       	cp	r8, r9
    1116:	38 f4       	brcc	.+14     	; 0x1126 <vfprintf+0x384>
    1118:	b6 01       	movw	r22, r12
    111a:	80 e3       	ldi	r24, 0x30	; 48
    111c:	90 e0       	ldi	r25, 0x00	; 0
    111e:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    1122:	9a 94       	dec	r9
    1124:	f7 cf       	rjmp	.-18     	; 0x1114 <vfprintf+0x372>
    1126:	8a 94       	dec	r8
    1128:	f3 01       	movw	r30, r6
    112a:	e8 0d       	add	r30, r8
    112c:	f1 1d       	adc	r31, r1
    112e:	80 81       	ld	r24, Z
    1130:	b6 01       	movw	r22, r12
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    1138:	81 10       	cpse	r8, r1
    113a:	f5 cf       	rjmp	.-22     	; 0x1126 <vfprintf+0x384>
    113c:	22 20       	and	r2, r2
    113e:	09 f4       	brne	.+2      	; 0x1142 <vfprintf+0x3a0>
    1140:	42 ce       	rjmp	.-892    	; 0xdc6 <vfprintf+0x24>
    1142:	b6 01       	movw	r22, r12
    1144:	80 e2       	ldi	r24, 0x20	; 32
    1146:	90 e0       	ldi	r25, 0x00	; 0
    1148:	0e 94 c8 08 	call	0x1190	; 0x1190 <fputc>
    114c:	2a 94       	dec	r2
    114e:	f6 cf       	rjmp	.-20     	; 0x113c <vfprintf+0x39a>
    1150:	f6 01       	movw	r30, r12
    1152:	86 81       	ldd	r24, Z+6	; 0x06
    1154:	97 81       	ldd	r25, Z+7	; 0x07
    1156:	02 c0       	rjmp	.+4      	; 0x115c <vfprintf+0x3ba>
    1158:	8f ef       	ldi	r24, 0xFF	; 255
    115a:	9f ef       	ldi	r25, 0xFF	; 255
    115c:	2b 96       	adiw	r28, 0x0b	; 11
    115e:	e2 e1       	ldi	r30, 0x12	; 18
    1160:	0c 94 b0 09 	jmp	0x1360	; 0x1360 <__epilogue_restores__>

00001164 <strnlen_P>:
    1164:	fc 01       	movw	r30, r24
    1166:	05 90       	lpm	r0, Z+
    1168:	61 50       	subi	r22, 0x01	; 1
    116a:	70 40       	sbci	r23, 0x00	; 0
    116c:	01 10       	cpse	r0, r1
    116e:	d8 f7       	brcc	.-10     	; 0x1166 <strnlen_P+0x2>
    1170:	80 95       	com	r24
    1172:	90 95       	com	r25
    1174:	8e 0f       	add	r24, r30
    1176:	9f 1f       	adc	r25, r31
    1178:	08 95       	ret

0000117a <strnlen>:
    117a:	fc 01       	movw	r30, r24
    117c:	61 50       	subi	r22, 0x01	; 1
    117e:	70 40       	sbci	r23, 0x00	; 0
    1180:	01 90       	ld	r0, Z+
    1182:	01 10       	cpse	r0, r1
    1184:	d8 f7       	brcc	.-10     	; 0x117c <strnlen+0x2>
    1186:	80 95       	com	r24
    1188:	90 95       	com	r25
    118a:	8e 0f       	add	r24, r30
    118c:	9f 1f       	adc	r25, r31
    118e:	08 95       	ret

00001190 <fputc>:
    1190:	0f 93       	push	r16
    1192:	1f 93       	push	r17
    1194:	cf 93       	push	r28
    1196:	df 93       	push	r29
    1198:	fb 01       	movw	r30, r22
    119a:	23 81       	ldd	r18, Z+3	; 0x03
    119c:	21 fd       	sbrc	r18, 1
    119e:	03 c0       	rjmp	.+6      	; 0x11a6 <fputc+0x16>
    11a0:	8f ef       	ldi	r24, 0xFF	; 255
    11a2:	9f ef       	ldi	r25, 0xFF	; 255
    11a4:	2c c0       	rjmp	.+88     	; 0x11fe <fputc+0x6e>
    11a6:	22 ff       	sbrs	r18, 2
    11a8:	16 c0       	rjmp	.+44     	; 0x11d6 <fputc+0x46>
    11aa:	46 81       	ldd	r20, Z+6	; 0x06
    11ac:	57 81       	ldd	r21, Z+7	; 0x07
    11ae:	24 81       	ldd	r18, Z+4	; 0x04
    11b0:	35 81       	ldd	r19, Z+5	; 0x05
    11b2:	42 17       	cp	r20, r18
    11b4:	53 07       	cpc	r21, r19
    11b6:	44 f4       	brge	.+16     	; 0x11c8 <fputc+0x38>
    11b8:	a0 81       	ld	r26, Z
    11ba:	b1 81       	ldd	r27, Z+1	; 0x01
    11bc:	9d 01       	movw	r18, r26
    11be:	2f 5f       	subi	r18, 0xFF	; 255
    11c0:	3f 4f       	sbci	r19, 0xFF	; 255
    11c2:	31 83       	std	Z+1, r19	; 0x01
    11c4:	20 83       	st	Z, r18
    11c6:	8c 93       	st	X, r24
    11c8:	26 81       	ldd	r18, Z+6	; 0x06
    11ca:	37 81       	ldd	r19, Z+7	; 0x07
    11cc:	2f 5f       	subi	r18, 0xFF	; 255
    11ce:	3f 4f       	sbci	r19, 0xFF	; 255
    11d0:	37 83       	std	Z+7, r19	; 0x07
    11d2:	26 83       	std	Z+6, r18	; 0x06
    11d4:	14 c0       	rjmp	.+40     	; 0x11fe <fputc+0x6e>
    11d6:	8b 01       	movw	r16, r22
    11d8:	ec 01       	movw	r28, r24
    11da:	fb 01       	movw	r30, r22
    11dc:	00 84       	ldd	r0, Z+8	; 0x08
    11de:	f1 85       	ldd	r31, Z+9	; 0x09
    11e0:	e0 2d       	mov	r30, r0
    11e2:	09 95       	icall
    11e4:	89 2b       	or	r24, r25
    11e6:	e1 f6       	brne	.-72     	; 0x11a0 <fputc+0x10>
    11e8:	d8 01       	movw	r26, r16
    11ea:	16 96       	adiw	r26, 0x06	; 6
    11ec:	8d 91       	ld	r24, X+
    11ee:	9c 91       	ld	r25, X
    11f0:	17 97       	sbiw	r26, 0x07	; 7
    11f2:	01 96       	adiw	r24, 0x01	; 1
    11f4:	17 96       	adiw	r26, 0x07	; 7
    11f6:	9c 93       	st	X, r25
    11f8:	8e 93       	st	-X, r24
    11fa:	16 97       	sbiw	r26, 0x06	; 6
    11fc:	ce 01       	movw	r24, r28
    11fe:	df 91       	pop	r29
    1200:	cf 91       	pop	r28
    1202:	1f 91       	pop	r17
    1204:	0f 91       	pop	r16
    1206:	08 95       	ret

00001208 <__ultoa_invert>:
    1208:	fa 01       	movw	r30, r20
    120a:	aa 27       	eor	r26, r26
    120c:	28 30       	cpi	r18, 0x08	; 8
    120e:	51 f1       	breq	.+84     	; 0x1264 <__ultoa_invert+0x5c>
    1210:	20 31       	cpi	r18, 0x10	; 16
    1212:	81 f1       	breq	.+96     	; 0x1274 <__ultoa_invert+0x6c>
    1214:	e8 94       	clt
    1216:	6f 93       	push	r22
    1218:	6e 7f       	andi	r22, 0xFE	; 254
    121a:	6e 5f       	subi	r22, 0xFE	; 254
    121c:	7f 4f       	sbci	r23, 0xFF	; 255
    121e:	8f 4f       	sbci	r24, 0xFF	; 255
    1220:	9f 4f       	sbci	r25, 0xFF	; 255
    1222:	af 4f       	sbci	r26, 0xFF	; 255
    1224:	b1 e0       	ldi	r27, 0x01	; 1
    1226:	3e d0       	rcall	.+124    	; 0x12a4 <__ultoa_invert+0x9c>
    1228:	b4 e0       	ldi	r27, 0x04	; 4
    122a:	3c d0       	rcall	.+120    	; 0x12a4 <__ultoa_invert+0x9c>
    122c:	67 0f       	add	r22, r23
    122e:	78 1f       	adc	r23, r24
    1230:	89 1f       	adc	r24, r25
    1232:	9a 1f       	adc	r25, r26
    1234:	a1 1d       	adc	r26, r1
    1236:	68 0f       	add	r22, r24
    1238:	79 1f       	adc	r23, r25
    123a:	8a 1f       	adc	r24, r26
    123c:	91 1d       	adc	r25, r1
    123e:	a1 1d       	adc	r26, r1
    1240:	6a 0f       	add	r22, r26
    1242:	71 1d       	adc	r23, r1
    1244:	81 1d       	adc	r24, r1
    1246:	91 1d       	adc	r25, r1
    1248:	a1 1d       	adc	r26, r1
    124a:	20 d0       	rcall	.+64     	; 0x128c <__ultoa_invert+0x84>
    124c:	09 f4       	brne	.+2      	; 0x1250 <__ultoa_invert+0x48>
    124e:	68 94       	set
    1250:	3f 91       	pop	r19
    1252:	2a e0       	ldi	r18, 0x0A	; 10
    1254:	26 9f       	mul	r18, r22
    1256:	11 24       	eor	r1, r1
    1258:	30 19       	sub	r19, r0
    125a:	30 5d       	subi	r19, 0xD0	; 208
    125c:	31 93       	st	Z+, r19
    125e:	de f6       	brtc	.-74     	; 0x1216 <__ultoa_invert+0xe>
    1260:	cf 01       	movw	r24, r30
    1262:	08 95       	ret
    1264:	46 2f       	mov	r20, r22
    1266:	47 70       	andi	r20, 0x07	; 7
    1268:	40 5d       	subi	r20, 0xD0	; 208
    126a:	41 93       	st	Z+, r20
    126c:	b3 e0       	ldi	r27, 0x03	; 3
    126e:	0f d0       	rcall	.+30     	; 0x128e <__ultoa_invert+0x86>
    1270:	c9 f7       	brne	.-14     	; 0x1264 <__ultoa_invert+0x5c>
    1272:	f6 cf       	rjmp	.-20     	; 0x1260 <__ultoa_invert+0x58>
    1274:	46 2f       	mov	r20, r22
    1276:	4f 70       	andi	r20, 0x0F	; 15
    1278:	40 5d       	subi	r20, 0xD0	; 208
    127a:	4a 33       	cpi	r20, 0x3A	; 58
    127c:	18 f0       	brcs	.+6      	; 0x1284 <__ultoa_invert+0x7c>
    127e:	49 5d       	subi	r20, 0xD9	; 217
    1280:	31 fd       	sbrc	r19, 1
    1282:	40 52       	subi	r20, 0x20	; 32
    1284:	41 93       	st	Z+, r20
    1286:	02 d0       	rcall	.+4      	; 0x128c <__ultoa_invert+0x84>
    1288:	a9 f7       	brne	.-22     	; 0x1274 <__ultoa_invert+0x6c>
    128a:	ea cf       	rjmp	.-44     	; 0x1260 <__ultoa_invert+0x58>
    128c:	b4 e0       	ldi	r27, 0x04	; 4
    128e:	a6 95       	lsr	r26
    1290:	97 95       	ror	r25
    1292:	87 95       	ror	r24
    1294:	77 95       	ror	r23
    1296:	67 95       	ror	r22
    1298:	ba 95       	dec	r27
    129a:	c9 f7       	brne	.-14     	; 0x128e <__ultoa_invert+0x86>
    129c:	00 97       	sbiw	r24, 0x00	; 0
    129e:	61 05       	cpc	r22, r1
    12a0:	71 05       	cpc	r23, r1
    12a2:	08 95       	ret
    12a4:	9b 01       	movw	r18, r22
    12a6:	ac 01       	movw	r20, r24
    12a8:	0a 2e       	mov	r0, r26
    12aa:	06 94       	lsr	r0
    12ac:	57 95       	ror	r21
    12ae:	47 95       	ror	r20
    12b0:	37 95       	ror	r19
    12b2:	27 95       	ror	r18
    12b4:	ba 95       	dec	r27
    12b6:	c9 f7       	brne	.-14     	; 0x12aa <__ultoa_invert+0xa2>
    12b8:	62 0f       	add	r22, r18
    12ba:	73 1f       	adc	r23, r19
    12bc:	84 1f       	adc	r24, r20
    12be:	95 1f       	adc	r25, r21
    12c0:	a0 1d       	adc	r26, r0
    12c2:	08 95       	ret

000012c4 <__divmodsi4>:
    12c4:	05 2e       	mov	r0, r21
    12c6:	97 fb       	bst	r25, 7
    12c8:	1e f4       	brtc	.+6      	; 0x12d0 <__divmodsi4+0xc>
    12ca:	00 94       	com	r0
    12cc:	0e 94 79 09 	call	0x12f2	; 0x12f2 <__negsi2>
    12d0:	57 fd       	sbrc	r21, 7
    12d2:	07 d0       	rcall	.+14     	; 0x12e2 <__divmodsi4_neg2>
    12d4:	0e 94 cb 09 	call	0x1396	; 0x1396 <__udivmodsi4>
    12d8:	07 fc       	sbrc	r0, 7
    12da:	03 d0       	rcall	.+6      	; 0x12e2 <__divmodsi4_neg2>
    12dc:	4e f4       	brtc	.+18     	; 0x12f0 <__divmodsi4_exit>
    12de:	0c 94 79 09 	jmp	0x12f2	; 0x12f2 <__negsi2>

000012e2 <__divmodsi4_neg2>:
    12e2:	50 95       	com	r21
    12e4:	40 95       	com	r20
    12e6:	30 95       	com	r19
    12e8:	21 95       	neg	r18
    12ea:	3f 4f       	sbci	r19, 0xFF	; 255
    12ec:	4f 4f       	sbci	r20, 0xFF	; 255
    12ee:	5f 4f       	sbci	r21, 0xFF	; 255

000012f0 <__divmodsi4_exit>:
    12f0:	08 95       	ret

000012f2 <__negsi2>:
    12f2:	90 95       	com	r25
    12f4:	80 95       	com	r24
    12f6:	70 95       	com	r23
    12f8:	61 95       	neg	r22
    12fa:	7f 4f       	sbci	r23, 0xFF	; 255
    12fc:	8f 4f       	sbci	r24, 0xFF	; 255
    12fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1300:	08 95       	ret

00001302 <__muluhisi3>:
    1302:	0e 94 ed 09 	call	0x13da	; 0x13da <__umulhisi3>
    1306:	a5 9f       	mul	r26, r21
    1308:	90 0d       	add	r25, r0
    130a:	b4 9f       	mul	r27, r20
    130c:	90 0d       	add	r25, r0
    130e:	a4 9f       	mul	r26, r20
    1310:	80 0d       	add	r24, r0
    1312:	91 1d       	adc	r25, r1
    1314:	11 24       	eor	r1, r1
    1316:	08 95       	ret

00001318 <__mulshisi3>:
    1318:	b7 ff       	sbrs	r27, 7
    131a:	0c 94 81 09 	jmp	0x1302	; 0x1302 <__muluhisi3>

0000131e <__mulohisi3>:
    131e:	0e 94 81 09 	call	0x1302	; 0x1302 <__muluhisi3>
    1322:	82 1b       	sub	r24, r18
    1324:	93 0b       	sbc	r25, r19
    1326:	08 95       	ret

00001328 <__prologue_saves__>:
    1328:	2f 92       	push	r2
    132a:	3f 92       	push	r3
    132c:	4f 92       	push	r4
    132e:	5f 92       	push	r5
    1330:	6f 92       	push	r6
    1332:	7f 92       	push	r7
    1334:	8f 92       	push	r8
    1336:	9f 92       	push	r9
    1338:	af 92       	push	r10
    133a:	bf 92       	push	r11
    133c:	cf 92       	push	r12
    133e:	df 92       	push	r13
    1340:	ef 92       	push	r14
    1342:	ff 92       	push	r15
    1344:	0f 93       	push	r16
    1346:	1f 93       	push	r17
    1348:	cf 93       	push	r28
    134a:	df 93       	push	r29
    134c:	cd b7       	in	r28, 0x3d	; 61
    134e:	de b7       	in	r29, 0x3e	; 62
    1350:	ca 1b       	sub	r28, r26
    1352:	db 0b       	sbc	r29, r27
    1354:	0f b6       	in	r0, 0x3f	; 63
    1356:	f8 94       	cli
    1358:	de bf       	out	0x3e, r29	; 62
    135a:	0f be       	out	0x3f, r0	; 63
    135c:	cd bf       	out	0x3d, r28	; 61
    135e:	09 94       	ijmp

00001360 <__epilogue_restores__>:
    1360:	2a 88       	ldd	r2, Y+18	; 0x12
    1362:	39 88       	ldd	r3, Y+17	; 0x11
    1364:	48 88       	ldd	r4, Y+16	; 0x10
    1366:	5f 84       	ldd	r5, Y+15	; 0x0f
    1368:	6e 84       	ldd	r6, Y+14	; 0x0e
    136a:	7d 84       	ldd	r7, Y+13	; 0x0d
    136c:	8c 84       	ldd	r8, Y+12	; 0x0c
    136e:	9b 84       	ldd	r9, Y+11	; 0x0b
    1370:	aa 84       	ldd	r10, Y+10	; 0x0a
    1372:	b9 84       	ldd	r11, Y+9	; 0x09
    1374:	c8 84       	ldd	r12, Y+8	; 0x08
    1376:	df 80       	ldd	r13, Y+7	; 0x07
    1378:	ee 80       	ldd	r14, Y+6	; 0x06
    137a:	fd 80       	ldd	r15, Y+5	; 0x05
    137c:	0c 81       	ldd	r16, Y+4	; 0x04
    137e:	1b 81       	ldd	r17, Y+3	; 0x03
    1380:	aa 81       	ldd	r26, Y+2	; 0x02
    1382:	b9 81       	ldd	r27, Y+1	; 0x01
    1384:	ce 0f       	add	r28, r30
    1386:	d1 1d       	adc	r29, r1
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	ed 01       	movw	r28, r26
    1394:	08 95       	ret

00001396 <__udivmodsi4>:
    1396:	a1 e2       	ldi	r26, 0x21	; 33
    1398:	1a 2e       	mov	r1, r26
    139a:	aa 1b       	sub	r26, r26
    139c:	bb 1b       	sub	r27, r27
    139e:	fd 01       	movw	r30, r26
    13a0:	0d c0       	rjmp	.+26     	; 0x13bc <__udivmodsi4_ep>

000013a2 <__udivmodsi4_loop>:
    13a2:	aa 1f       	adc	r26, r26
    13a4:	bb 1f       	adc	r27, r27
    13a6:	ee 1f       	adc	r30, r30
    13a8:	ff 1f       	adc	r31, r31
    13aa:	a2 17       	cp	r26, r18
    13ac:	b3 07       	cpc	r27, r19
    13ae:	e4 07       	cpc	r30, r20
    13b0:	f5 07       	cpc	r31, r21
    13b2:	20 f0       	brcs	.+8      	; 0x13bc <__udivmodsi4_ep>
    13b4:	a2 1b       	sub	r26, r18
    13b6:	b3 0b       	sbc	r27, r19
    13b8:	e4 0b       	sbc	r30, r20
    13ba:	f5 0b       	sbc	r31, r21

000013bc <__udivmodsi4_ep>:
    13bc:	66 1f       	adc	r22, r22
    13be:	77 1f       	adc	r23, r23
    13c0:	88 1f       	adc	r24, r24
    13c2:	99 1f       	adc	r25, r25
    13c4:	1a 94       	dec	r1
    13c6:	69 f7       	brne	.-38     	; 0x13a2 <__udivmodsi4_loop>
    13c8:	60 95       	com	r22
    13ca:	70 95       	com	r23
    13cc:	80 95       	com	r24
    13ce:	90 95       	com	r25
    13d0:	9b 01       	movw	r18, r22
    13d2:	ac 01       	movw	r20, r24
    13d4:	bd 01       	movw	r22, r26
    13d6:	cf 01       	movw	r24, r30
    13d8:	08 95       	ret

000013da <__umulhisi3>:
    13da:	a2 9f       	mul	r26, r18
    13dc:	b0 01       	movw	r22, r0
    13de:	b3 9f       	mul	r27, r19
    13e0:	c0 01       	movw	r24, r0
    13e2:	a3 9f       	mul	r26, r19
    13e4:	70 0d       	add	r23, r0
    13e6:	81 1d       	adc	r24, r1
    13e8:	11 24       	eor	r1, r1
    13ea:	91 1d       	adc	r25, r1
    13ec:	b2 9f       	mul	r27, r18
    13ee:	70 0d       	add	r23, r0
    13f0:	81 1d       	adc	r24, r1
    13f2:	11 24       	eor	r1, r1
    13f4:	91 1d       	adc	r25, r1
    13f6:	08 95       	ret

000013f8 <_exit>:
    13f8:	f8 94       	cli

000013fa <__stop_program>:
    13fa:	ff cf       	rjmp	.-2      	; 0x13fa <__stop_program>
